// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/personcsindex"
	"app/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonCsIndexUpdate is the builder for updating PersonCsIndex entities.
type PersonCsIndexUpdate struct {
	config
	hooks    []Hook
	mutation *PersonCsIndexMutation
}

// Where appends a list predicates to the PersonCsIndexUpdate builder.
func (pciu *PersonCsIndexUpdate) Where(ps ...predicate.PersonCsIndex) *PersonCsIndexUpdate {
	pciu.mutation.Where(ps...)
	return pciu
}

// SetPrsnType sets the "prsn_type" field.
func (pciu *PersonCsIndexUpdate) SetPrsnType(pt personcsindex.PrsnType) *PersonCsIndexUpdate {
	pciu.mutation.SetPrsnType(pt)
	return pciu
}

// SetPrsnPosition sets the "prsn_position" field.
func (pciu *PersonCsIndexUpdate) SetPrsnPosition(i int) *PersonCsIndexUpdate {
	pciu.mutation.ResetPrsnPosition()
	pciu.mutation.SetPrsnPosition(i)
	return pciu
}

// AddPrsnPosition adds i to the "prsn_position" field.
func (pciu *PersonCsIndexUpdate) AddPrsnPosition(i int) *PersonCsIndexUpdate {
	pciu.mutation.AddPrsnPosition(i)
	return pciu
}

// SetSubjectID sets the "subject_id" field.
func (pciu *PersonCsIndexUpdate) SetSubjectID(i int) *PersonCsIndexUpdate {
	pciu.mutation.ResetSubjectID()
	pciu.mutation.SetSubjectID(i)
	return pciu
}

// AddSubjectID adds i to the "subject_id" field.
func (pciu *PersonCsIndexUpdate) AddSubjectID(i int) *PersonCsIndexUpdate {
	pciu.mutation.AddSubjectID(i)
	return pciu
}

// SetSubjectTypeID sets the "subject_type_id" field.
func (pciu *PersonCsIndexUpdate) SetSubjectTypeID(i int) *PersonCsIndexUpdate {
	pciu.mutation.ResetSubjectTypeID()
	pciu.mutation.SetSubjectTypeID(i)
	return pciu
}

// AddSubjectTypeID adds i to the "subject_type_id" field.
func (pciu *PersonCsIndexUpdate) AddSubjectTypeID(i int) *PersonCsIndexUpdate {
	pciu.mutation.AddSubjectTypeID(i)
	return pciu
}

// SetSummary sets the "summary" field.
func (pciu *PersonCsIndexUpdate) SetSummary(s string) *PersonCsIndexUpdate {
	pciu.mutation.SetSummary(s)
	return pciu
}

// SetAppearEps sets the "appear_eps" field.
func (pciu *PersonCsIndexUpdate) SetAppearEps(s string) *PersonCsIndexUpdate {
	pciu.mutation.SetAppearEps(s)
	return pciu
}

// Mutation returns the PersonCsIndexMutation object of the builder.
func (pciu *PersonCsIndexUpdate) Mutation() *PersonCsIndexMutation {
	return pciu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pciu *PersonCsIndexUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pciu.hooks) == 0 {
		if err = pciu.check(); err != nil {
			return 0, err
		}
		affected, err = pciu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonCsIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pciu.check(); err != nil {
				return 0, err
			}
			pciu.mutation = mutation
			affected, err = pciu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pciu.hooks) - 1; i >= 0; i-- {
			if pciu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pciu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pciu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pciu *PersonCsIndexUpdate) SaveX(ctx context.Context) int {
	affected, err := pciu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pciu *PersonCsIndexUpdate) Exec(ctx context.Context) error {
	_, err := pciu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pciu *PersonCsIndexUpdate) ExecX(ctx context.Context) {
	if err := pciu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pciu *PersonCsIndexUpdate) check() error {
	if v, ok := pciu.mutation.PrsnType(); ok {
		if err := personcsindex.PrsnTypeValidator(v); err != nil {
			return &ValidationError{Name: "prsn_type", err: fmt.Errorf("ent: validator failed for field \"prsn_type\": %w", err)}
		}
	}
	return nil
}

func (pciu *PersonCsIndexUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   personcsindex.Table,
			Columns: personcsindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint8,
				Column: personcsindex.FieldID,
			},
		},
	}
	if ps := pciu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pciu.mutation.PrsnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: personcsindex.FieldPrsnType,
		})
	}
	if value, ok := pciu.mutation.PrsnPosition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldPrsnPosition,
		})
	}
	if value, ok := pciu.mutation.AddedPrsnPosition(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldPrsnPosition,
		})
	}
	if value, ok := pciu.mutation.SubjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectID,
		})
	}
	if value, ok := pciu.mutation.AddedSubjectID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectID,
		})
	}
	if value, ok := pciu.mutation.SubjectTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectTypeID,
		})
	}
	if value, ok := pciu.mutation.AddedSubjectTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectTypeID,
		})
	}
	if value, ok := pciu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personcsindex.FieldSummary,
		})
	}
	if value, ok := pciu.mutation.AppearEps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personcsindex.FieldAppearEps,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pciu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personcsindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PersonCsIndexUpdateOne is the builder for updating a single PersonCsIndex entity.
type PersonCsIndexUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonCsIndexMutation
}

// SetPrsnType sets the "prsn_type" field.
func (pciuo *PersonCsIndexUpdateOne) SetPrsnType(pt personcsindex.PrsnType) *PersonCsIndexUpdateOne {
	pciuo.mutation.SetPrsnType(pt)
	return pciuo
}

// SetPrsnPosition sets the "prsn_position" field.
func (pciuo *PersonCsIndexUpdateOne) SetPrsnPosition(i int) *PersonCsIndexUpdateOne {
	pciuo.mutation.ResetPrsnPosition()
	pciuo.mutation.SetPrsnPosition(i)
	return pciuo
}

// AddPrsnPosition adds i to the "prsn_position" field.
func (pciuo *PersonCsIndexUpdateOne) AddPrsnPosition(i int) *PersonCsIndexUpdateOne {
	pciuo.mutation.AddPrsnPosition(i)
	return pciuo
}

// SetSubjectID sets the "subject_id" field.
func (pciuo *PersonCsIndexUpdateOne) SetSubjectID(i int) *PersonCsIndexUpdateOne {
	pciuo.mutation.ResetSubjectID()
	pciuo.mutation.SetSubjectID(i)
	return pciuo
}

// AddSubjectID adds i to the "subject_id" field.
func (pciuo *PersonCsIndexUpdateOne) AddSubjectID(i int) *PersonCsIndexUpdateOne {
	pciuo.mutation.AddSubjectID(i)
	return pciuo
}

// SetSubjectTypeID sets the "subject_type_id" field.
func (pciuo *PersonCsIndexUpdateOne) SetSubjectTypeID(i int) *PersonCsIndexUpdateOne {
	pciuo.mutation.ResetSubjectTypeID()
	pciuo.mutation.SetSubjectTypeID(i)
	return pciuo
}

// AddSubjectTypeID adds i to the "subject_type_id" field.
func (pciuo *PersonCsIndexUpdateOne) AddSubjectTypeID(i int) *PersonCsIndexUpdateOne {
	pciuo.mutation.AddSubjectTypeID(i)
	return pciuo
}

// SetSummary sets the "summary" field.
func (pciuo *PersonCsIndexUpdateOne) SetSummary(s string) *PersonCsIndexUpdateOne {
	pciuo.mutation.SetSummary(s)
	return pciuo
}

// SetAppearEps sets the "appear_eps" field.
func (pciuo *PersonCsIndexUpdateOne) SetAppearEps(s string) *PersonCsIndexUpdateOne {
	pciuo.mutation.SetAppearEps(s)
	return pciuo
}

// Mutation returns the PersonCsIndexMutation object of the builder.
func (pciuo *PersonCsIndexUpdateOne) Mutation() *PersonCsIndexMutation {
	return pciuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (pciuo *PersonCsIndexUpdateOne) Select(field string, fields ...string) *PersonCsIndexUpdateOne {
	pciuo.fields = append([]string{field}, fields...)
	return pciuo
}

// Save executes the query and returns the updated PersonCsIndex entity.
func (pciuo *PersonCsIndexUpdateOne) Save(ctx context.Context) (*PersonCsIndex, error) {
	var (
		err  error
		node *PersonCsIndex
	)
	if len(pciuo.hooks) == 0 {
		if err = pciuo.check(); err != nil {
			return nil, err
		}
		node, err = pciuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonCsIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pciuo.check(); err != nil {
				return nil, err
			}
			pciuo.mutation = mutation
			node, err = pciuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(pciuo.hooks) - 1; i >= 0; i-- {
			if pciuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pciuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pciuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (pciuo *PersonCsIndexUpdateOne) SaveX(ctx context.Context) *PersonCsIndex {
	node, err := pciuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (pciuo *PersonCsIndexUpdateOne) Exec(ctx context.Context) error {
	_, err := pciuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pciuo *PersonCsIndexUpdateOne) ExecX(ctx context.Context) {
	if err := pciuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pciuo *PersonCsIndexUpdateOne) check() error {
	if v, ok := pciuo.mutation.PrsnType(); ok {
		if err := personcsindex.PrsnTypeValidator(v); err != nil {
			return &ValidationError{Name: "prsn_type", err: fmt.Errorf("ent: validator failed for field \"prsn_type\": %w", err)}
		}
	}
	return nil
}

func (pciuo *PersonCsIndexUpdateOne) sqlSave(ctx context.Context) (_node *PersonCsIndex, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   personcsindex.Table,
			Columns: personcsindex.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint8,
				Column: personcsindex.FieldID,
			},
		},
	}
	id, ok := pciuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing PersonCsIndex.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := pciuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, personcsindex.FieldID)
		for _, f := range fields {
			if !personcsindex.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != personcsindex.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := pciuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pciuo.mutation.PrsnType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: personcsindex.FieldPrsnType,
		})
	}
	if value, ok := pciuo.mutation.PrsnPosition(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldPrsnPosition,
		})
	}
	if value, ok := pciuo.mutation.AddedPrsnPosition(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldPrsnPosition,
		})
	}
	if value, ok := pciuo.mutation.SubjectID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectID,
		})
	}
	if value, ok := pciuo.mutation.AddedSubjectID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectID,
		})
	}
	if value, ok := pciuo.mutation.SubjectTypeID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectTypeID,
		})
	}
	if value, ok := pciuo.mutation.AddedSubjectTypeID(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectTypeID,
		})
	}
	if value, ok := pciuo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personcsindex.FieldSummary,
		})
	}
	if value, ok := pciuo.mutation.AppearEps(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personcsindex.FieldAppearEps,
		})
	}
	_node = &PersonCsIndex{config: pciuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, pciuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{personcsindex.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
