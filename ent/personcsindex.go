// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/personcsindex"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// PersonCsIndex is the model entity for the PersonCsIndex schema.
type PersonCsIndex struct {
	config `json:"-"`
	// ID of the ent.
	ID uint8 `json:"id,omitempty"`
	// PrsnType holds the value of the "prsn_type" field.
	PrsnType personcsindex.PrsnType `json:"-"`
	// PrsnPosition holds the value of the "prsn_position" field.
	PrsnPosition int `json:"prsn_position,omitempty"`
	// SubjectID holds the value of the "subject_id" field.
	SubjectID int `json:"subject_id,omitempty"`
	// SubjectTypeID holds the value of the "subject_type_id" field.
	SubjectTypeID int `json:"subject_type_id,omitempty"`
	// Summary holds the value of the "summary" field.
	Summary string `json:"summary,omitempty"`
	// AppearEps holds the value of the "appear_eps" field.
	AppearEps string `json:"appear_eps,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*PersonCsIndex) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case personcsindex.FieldID, personcsindex.FieldPrsnPosition, personcsindex.FieldSubjectID, personcsindex.FieldSubjectTypeID:
			values[i] = new(sql.NullInt64)
		case personcsindex.FieldPrsnType, personcsindex.FieldSummary, personcsindex.FieldAppearEps:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type PersonCsIndex", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the PersonCsIndex fields.
func (pci *PersonCsIndex) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case personcsindex.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			pci.ID = uint8(value.Int64)
		case personcsindex.FieldPrsnType:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prsn_type", values[i])
			} else if value.Valid {
				pci.PrsnType = personcsindex.PrsnType(value.String)
			}
		case personcsindex.FieldPrsnPosition:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field prsn_position", values[i])
			} else if value.Valid {
				pci.PrsnPosition = int(value.Int64)
			}
		case personcsindex.FieldSubjectID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subject_id", values[i])
			} else if value.Valid {
				pci.SubjectID = int(value.Int64)
			}
		case personcsindex.FieldSubjectTypeID:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field subject_type_id", values[i])
			} else if value.Valid {
				pci.SubjectTypeID = int(value.Int64)
			}
		case personcsindex.FieldSummary:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field summary", values[i])
			} else if value.Valid {
				pci.Summary = value.String
			}
		case personcsindex.FieldAppearEps:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field appear_eps", values[i])
			} else if value.Valid {
				pci.AppearEps = value.String
			}
		}
	}
	return nil
}

// Update returns a builder for updating this PersonCsIndex.
// Note that you need to call PersonCsIndex.Unwrap() before calling this method if this PersonCsIndex
// was returned from a transaction, and the transaction was committed or rolled back.
func (pci *PersonCsIndex) Update() *PersonCsIndexUpdateOne {
	return (&PersonCsIndexClient{config: pci.config}).UpdateOne(pci)
}

// Unwrap unwraps the PersonCsIndex entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (pci *PersonCsIndex) Unwrap() *PersonCsIndex {
	tx, ok := pci.config.driver.(*txDriver)
	if !ok {
		panic("ent: PersonCsIndex is not a transactional entity")
	}
	pci.config.driver = tx.drv
	return pci
}

// String implements the fmt.Stringer.
func (pci *PersonCsIndex) String() string {
	var builder strings.Builder
	builder.WriteString("PersonCsIndex(")
	builder.WriteString(fmt.Sprintf("id=%v", pci.ID))
	builder.WriteString(", prsn_type=")
	builder.WriteString(fmt.Sprintf("%v", pci.PrsnType))
	builder.WriteString(", prsn_position=")
	builder.WriteString(fmt.Sprintf("%v", pci.PrsnPosition))
	builder.WriteString(", subject_id=")
	builder.WriteString(fmt.Sprintf("%v", pci.SubjectID))
	builder.WriteString(", subject_type_id=")
	builder.WriteString(fmt.Sprintf("%v", pci.SubjectTypeID))
	builder.WriteString(", summary=")
	builder.WriteString(pci.Summary)
	builder.WriteString(", appear_eps=")
	builder.WriteString(pci.AppearEps)
	builder.WriteByte(')')
	return builder.String()
}

// PersonCsIndexes is a parsable slice of PersonCsIndex.
type PersonCsIndexes []*PersonCsIndex

func (pci PersonCsIndexes) config(cfg config) {
	for _i := range pci {
		pci[_i].config = cfg
	}
}
