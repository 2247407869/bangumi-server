// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/person"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonCreate is the builder for creating a Person entity.
type PersonCreate struct {
	config
	mutation *PersonMutation
	hooks    []Hook
}

// SetName sets the "name" field.
func (pc *PersonCreate) SetName(s string) *PersonCreate {
	pc.mutation.SetName(s)
	return pc
}

// SetType sets the "type" field.
func (pc *PersonCreate) SetType(s string) *PersonCreate {
	pc.mutation.SetType(s)
	return pc
}

// SetInfobox sets the "infobox" field.
func (pc *PersonCreate) SetInfobox(s string) *PersonCreate {
	pc.mutation.SetInfobox(s)
	return pc
}

// SetProducer sets the "producer" field.
func (pc *PersonCreate) SetProducer(i int) *PersonCreate {
	pc.mutation.SetProducer(i)
	return pc
}

// SetMangaka sets the "mangaka" field.
func (pc *PersonCreate) SetMangaka(i int) *PersonCreate {
	pc.mutation.SetMangaka(i)
	return pc
}

// SetArtist sets the "artist" field.
func (pc *PersonCreate) SetArtist(i int) *PersonCreate {
	pc.mutation.SetArtist(i)
	return pc
}

// SetSeiyu sets the "seiyu" field.
func (pc *PersonCreate) SetSeiyu(i int) *PersonCreate {
	pc.mutation.SetSeiyu(i)
	return pc
}

// SetWriter sets the "writer" field.
func (pc *PersonCreate) SetWriter(i int) *PersonCreate {
	pc.mutation.SetWriter(i)
	return pc
}

// SetIllustrator sets the "illustrator" field.
func (pc *PersonCreate) SetIllustrator(i int) *PersonCreate {
	pc.mutation.SetIllustrator(i)
	return pc
}

// SetActor sets the "actor" field.
func (pc *PersonCreate) SetActor(i int) *PersonCreate {
	pc.mutation.SetActor(i)
	return pc
}

// SetSummary sets the "summary" field.
func (pc *PersonCreate) SetSummary(s string) *PersonCreate {
	pc.mutation.SetSummary(s)
	return pc
}

// SetImg sets the "img" field.
func (pc *PersonCreate) SetImg(s string) *PersonCreate {
	pc.mutation.SetImg(s)
	return pc
}

// SetImgAnidb sets the "img_anidb" field.
func (pc *PersonCreate) SetImgAnidb(s string) *PersonCreate {
	pc.mutation.SetImgAnidb(s)
	return pc
}

// SetComment sets the "comment" field.
func (pc *PersonCreate) SetComment(i int) *PersonCreate {
	pc.mutation.SetComment(i)
	return pc
}

// SetCollects sets the "collects" field.
func (pc *PersonCreate) SetCollects(i int) *PersonCreate {
	pc.mutation.SetCollects(i)
	return pc
}

// SetDateline sets the "dateline" field.
func (pc *PersonCreate) SetDateline(i int) *PersonCreate {
	pc.mutation.SetDateline(i)
	return pc
}

// SetLastpost sets the "lastpost" field.
func (pc *PersonCreate) SetLastpost(i int) *PersonCreate {
	pc.mutation.SetLastpost(i)
	return pc
}

// SetLock sets the "lock" field.
func (pc *PersonCreate) SetLock(i int) *PersonCreate {
	pc.mutation.SetLock(i)
	return pc
}

// SetAnidbID sets the "anidb_id" field.
func (pc *PersonCreate) SetAnidbID(s string) *PersonCreate {
	pc.mutation.SetAnidbID(s)
	return pc
}

// SetBan sets the "ban" field.
func (pc *PersonCreate) SetBan(i int) *PersonCreate {
	pc.mutation.SetBan(i)
	return pc
}

// SetRedirect sets the "redirect" field.
func (pc *PersonCreate) SetRedirect(i int) *PersonCreate {
	pc.mutation.SetRedirect(i)
	return pc
}

// SetNsfw sets the "nsfw" field.
func (pc *PersonCreate) SetNsfw(b bool) *PersonCreate {
	pc.mutation.SetNsfw(b)
	return pc
}

// SetID sets the "id" field.
func (pc *PersonCreate) SetID(i int) *PersonCreate {
	pc.mutation.SetID(i)
	return pc
}

// Mutation returns the PersonMutation object of the builder.
func (pc *PersonCreate) Mutation() *PersonMutation {
	return pc.mutation
}

// Save creates the Person in the database.
func (pc *PersonCreate) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if len(pc.hooks) == 0 {
		if err = pc.check(); err != nil {
			return nil, err
		}
		node, err = pc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pc.check(); err != nil {
				return nil, err
			}
			pc.mutation = mutation
			if node, err = pc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pc.hooks) - 1; i >= 0; i-- {
			if pc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pc *PersonCreate) SaveX(ctx context.Context) *Person {
	v, err := pc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pc *PersonCreate) Exec(ctx context.Context) error {
	_, err := pc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pc *PersonCreate) ExecX(ctx context.Context) {
	if err := pc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pc *PersonCreate) check() error {
	if _, ok := pc.mutation.Name(); !ok {
		return &ValidationError{Name: "name", err: errors.New(`ent: missing required field "name"`)}
	}
	if v, ok := pc.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf(`ent: validator failed for field "name": %w`, err)}
		}
	}
	if _, ok := pc.mutation.GetType(); !ok {
		return &ValidationError{Name: "type", err: errors.New(`ent: missing required field "type"`)}
	}
	if _, ok := pc.mutation.Infobox(); !ok {
		return &ValidationError{Name: "infobox", err: errors.New(`ent: missing required field "infobox"`)}
	}
	if _, ok := pc.mutation.Producer(); !ok {
		return &ValidationError{Name: "producer", err: errors.New(`ent: missing required field "producer"`)}
	}
	if _, ok := pc.mutation.Mangaka(); !ok {
		return &ValidationError{Name: "mangaka", err: errors.New(`ent: missing required field "mangaka"`)}
	}
	if _, ok := pc.mutation.Artist(); !ok {
		return &ValidationError{Name: "artist", err: errors.New(`ent: missing required field "artist"`)}
	}
	if _, ok := pc.mutation.Seiyu(); !ok {
		return &ValidationError{Name: "seiyu", err: errors.New(`ent: missing required field "seiyu"`)}
	}
	if _, ok := pc.mutation.Writer(); !ok {
		return &ValidationError{Name: "writer", err: errors.New(`ent: missing required field "writer"`)}
	}
	if _, ok := pc.mutation.Illustrator(); !ok {
		return &ValidationError{Name: "illustrator", err: errors.New(`ent: missing required field "illustrator"`)}
	}
	if _, ok := pc.mutation.Actor(); !ok {
		return &ValidationError{Name: "actor", err: errors.New(`ent: missing required field "actor"`)}
	}
	if _, ok := pc.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "summary"`)}
	}
	if _, ok := pc.mutation.Img(); !ok {
		return &ValidationError{Name: "img", err: errors.New(`ent: missing required field "img"`)}
	}
	if v, ok := pc.mutation.Img(); ok {
		if err := person.ImgValidator(v); err != nil {
			return &ValidationError{Name: "img", err: fmt.Errorf(`ent: validator failed for field "img": %w`, err)}
		}
	}
	if _, ok := pc.mutation.ImgAnidb(); !ok {
		return &ValidationError{Name: "img_anidb", err: errors.New(`ent: missing required field "img_anidb"`)}
	}
	if v, ok := pc.mutation.ImgAnidb(); ok {
		if err := person.ImgAnidbValidator(v); err != nil {
			return &ValidationError{Name: "img_anidb", err: fmt.Errorf(`ent: validator failed for field "img_anidb": %w`, err)}
		}
	}
	if _, ok := pc.mutation.Comment(); !ok {
		return &ValidationError{Name: "comment", err: errors.New(`ent: missing required field "comment"`)}
	}
	if _, ok := pc.mutation.Collects(); !ok {
		return &ValidationError{Name: "collects", err: errors.New(`ent: missing required field "collects"`)}
	}
	if _, ok := pc.mutation.Dateline(); !ok {
		return &ValidationError{Name: "dateline", err: errors.New(`ent: missing required field "dateline"`)}
	}
	if _, ok := pc.mutation.Lastpost(); !ok {
		return &ValidationError{Name: "lastpost", err: errors.New(`ent: missing required field "lastpost"`)}
	}
	if _, ok := pc.mutation.Lock(); !ok {
		return &ValidationError{Name: "lock", err: errors.New(`ent: missing required field "lock"`)}
	}
	if _, ok := pc.mutation.AnidbID(); !ok {
		return &ValidationError{Name: "anidb_id", err: errors.New(`ent: missing required field "anidb_id"`)}
	}
	if _, ok := pc.mutation.Ban(); !ok {
		return &ValidationError{Name: "ban", err: errors.New(`ent: missing required field "ban"`)}
	}
	if _, ok := pc.mutation.Redirect(); !ok {
		return &ValidationError{Name: "redirect", err: errors.New(`ent: missing required field "redirect"`)}
	}
	if _, ok := pc.mutation.Nsfw(); !ok {
		return &ValidationError{Name: "nsfw", err: errors.New(`ent: missing required field "nsfw"`)}
	}
	return nil
}

func (pc *PersonCreate) sqlSave(ctx context.Context) (*Person, error) {
	_node, _spec := pc.createSpec()
	if err := sqlgraph.CreateNode(ctx, pc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = int(id)
	}
	return _node, nil
}

func (pc *PersonCreate) createSpec() (*Person, *sqlgraph.CreateSpec) {
	var (
		_node = &Person{config: pc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: person.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		}
	)
	if id, ok := pc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pc.mutation.Name(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
		_node.Name = value
	}
	if value, ok := pc.mutation.GetType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldType,
		})
		_node.Type = value
	}
	if value, ok := pc.mutation.Infobox(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldInfobox,
		})
		_node.Infobox = value
	}
	if value, ok := pc.mutation.Producer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldProducer,
		})
		_node.Producer = value
	}
	if value, ok := pc.mutation.Mangaka(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMangaka,
		})
		_node.Mangaka = value
	}
	if value, ok := pc.mutation.Artist(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldArtist,
		})
		_node.Artist = value
	}
	if value, ok := pc.mutation.Seiyu(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldSeiyu,
		})
		_node.Seiyu = value
	}
	if value, ok := pc.mutation.Writer(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldWriter,
		})
		_node.Writer = value
	}
	if value, ok := pc.mutation.Illustrator(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldIllustrator,
		})
		_node.Illustrator = value
	}
	if value, ok := pc.mutation.Actor(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldActor,
		})
		_node.Actor = value
	}
	if value, ok := pc.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := pc.mutation.Img(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldImg,
		})
		_node.Img = value
	}
	if value, ok := pc.mutation.ImgAnidb(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldImgAnidb,
		})
		_node.ImgAnidb = value
	}
	if value, ok := pc.mutation.Comment(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldComment,
		})
		_node.Comment = value
	}
	if value, ok := pc.mutation.Collects(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCollects,
		})
		_node.Collects = value
	}
	if value, ok := pc.mutation.Dateline(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldDateline,
		})
		_node.Dateline = value
	}
	if value, ok := pc.mutation.Lastpost(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLastpost,
		})
		_node.Lastpost = value
	}
	if value, ok := pc.mutation.Lock(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLock,
		})
		_node.Lock = value
	}
	if value, ok := pc.mutation.AnidbID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldAnidbID,
		})
		_node.AnidbID = value
	}
	if value, ok := pc.mutation.Ban(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldBan,
		})
		_node.Ban = value
	}
	if value, ok := pc.mutation.Redirect(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldRedirect,
		})
		_node.Redirect = value
	}
	if value, ok := pc.mutation.Nsfw(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldNsfw,
		})
		_node.Nsfw = value
	}
	return _node, _spec
}

// PersonCreateBulk is the builder for creating many Person entities in bulk.
type PersonCreateBulk struct {
	config
	builders []*PersonCreate
}

// Save creates the Person entities in the database.
func (pcb *PersonCreateBulk) Save(ctx context.Context) ([]*Person, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcb.builders))
	nodes := make([]*Person, len(pcb.builders))
	mutators := make([]Mutator, len(pcb.builders))
	for i := range pcb.builders {
		func(i int, root context.Context) {
			builder := pcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = int(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcb *PersonCreateBulk) SaveX(ctx context.Context) []*Person {
	v, err := pcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcb *PersonCreateBulk) Exec(ctx context.Context) error {
	_, err := pcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcb *PersonCreateBulk) ExecX(ctx context.Context) {
	if err := pcb.Exec(ctx); err != nil {
		panic(err)
	}
}
