// Code generated by entc, DO NOT EDIT.

package personcsindex

import (
	"app/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint8) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// PrsnPosition applies equality check predicate on the "prsn_position" field. It's identical to PrsnPositionEQ.
func PrsnPosition(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrsnPosition), v))
	})
}

// SubjectID applies equality check predicate on the "subject_id" field. It's identical to SubjectIDEQ.
func SubjectID(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectID), v))
	})
}

// SubjectTypeID applies equality check predicate on the "subject_type_id" field. It's identical to SubjectTypeIDEQ.
func SubjectTypeID(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectTypeID), v))
	})
}

// Summary applies equality check predicate on the "summary" field. It's identical to SummaryEQ.
func Summary(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// AppearEps applies equality check predicate on the "appear_eps" field. It's identical to AppearEpsEQ.
func AppearEps(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppearEps), v))
	})
}

// PrsnTypeEQ applies the EQ predicate on the "prsn_type" field.
func PrsnTypeEQ(v PrsnType) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrsnType), v))
	})
}

// PrsnTypeNEQ applies the NEQ predicate on the "prsn_type" field.
func PrsnTypeNEQ(v PrsnType) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrsnType), v))
	})
}

// PrsnTypeIn applies the In predicate on the "prsn_type" field.
func PrsnTypeIn(vs ...PrsnType) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrsnType), v...))
	})
}

// PrsnTypeNotIn applies the NotIn predicate on the "prsn_type" field.
func PrsnTypeNotIn(vs ...PrsnType) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrsnType), v...))
	})
}

// PrsnPositionEQ applies the EQ predicate on the "prsn_position" field.
func PrsnPositionEQ(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrsnPosition), v))
	})
}

// PrsnPositionNEQ applies the NEQ predicate on the "prsn_position" field.
func PrsnPositionNEQ(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrsnPosition), v))
	})
}

// PrsnPositionIn applies the In predicate on the "prsn_position" field.
func PrsnPositionIn(vs ...int) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrsnPosition), v...))
	})
}

// PrsnPositionNotIn applies the NotIn predicate on the "prsn_position" field.
func PrsnPositionNotIn(vs ...int) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrsnPosition), v...))
	})
}

// PrsnPositionGT applies the GT predicate on the "prsn_position" field.
func PrsnPositionGT(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldPrsnPosition), v))
	})
}

// PrsnPositionGTE applies the GTE predicate on the "prsn_position" field.
func PrsnPositionGTE(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldPrsnPosition), v))
	})
}

// PrsnPositionLT applies the LT predicate on the "prsn_position" field.
func PrsnPositionLT(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldPrsnPosition), v))
	})
}

// PrsnPositionLTE applies the LTE predicate on the "prsn_position" field.
func PrsnPositionLTE(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldPrsnPosition), v))
	})
}

// SubjectIDEQ applies the EQ predicate on the "subject_id" field.
func SubjectIDEQ(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectID), v))
	})
}

// SubjectIDNEQ applies the NEQ predicate on the "subject_id" field.
func SubjectIDNEQ(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectID), v))
	})
}

// SubjectIDIn applies the In predicate on the "subject_id" field.
func SubjectIDIn(vs ...int) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectID), v...))
	})
}

// SubjectIDNotIn applies the NotIn predicate on the "subject_id" field.
func SubjectIDNotIn(vs ...int) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectID), v...))
	})
}

// SubjectIDGT applies the GT predicate on the "subject_id" field.
func SubjectIDGT(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubjectID), v))
	})
}

// SubjectIDGTE applies the GTE predicate on the "subject_id" field.
func SubjectIDGTE(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubjectID), v))
	})
}

// SubjectIDLT applies the LT predicate on the "subject_id" field.
func SubjectIDLT(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubjectID), v))
	})
}

// SubjectIDLTE applies the LTE predicate on the "subject_id" field.
func SubjectIDLTE(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubjectID), v))
	})
}

// SubjectTypeIDEQ applies the EQ predicate on the "subject_type_id" field.
func SubjectTypeIDEQ(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSubjectTypeID), v))
	})
}

// SubjectTypeIDNEQ applies the NEQ predicate on the "subject_type_id" field.
func SubjectTypeIDNEQ(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSubjectTypeID), v))
	})
}

// SubjectTypeIDIn applies the In predicate on the "subject_type_id" field.
func SubjectTypeIDIn(vs ...int) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSubjectTypeID), v...))
	})
}

// SubjectTypeIDNotIn applies the NotIn predicate on the "subject_type_id" field.
func SubjectTypeIDNotIn(vs ...int) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSubjectTypeID), v...))
	})
}

// SubjectTypeIDGT applies the GT predicate on the "subject_type_id" field.
func SubjectTypeIDGT(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSubjectTypeID), v))
	})
}

// SubjectTypeIDGTE applies the GTE predicate on the "subject_type_id" field.
func SubjectTypeIDGTE(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSubjectTypeID), v))
	})
}

// SubjectTypeIDLT applies the LT predicate on the "subject_type_id" field.
func SubjectTypeIDLT(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSubjectTypeID), v))
	})
}

// SubjectTypeIDLTE applies the LTE predicate on the "subject_type_id" field.
func SubjectTypeIDLTE(v int) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSubjectTypeID), v))
	})
}

// SummaryEQ applies the EQ predicate on the "summary" field.
func SummaryEQ(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldSummary), v))
	})
}

// SummaryNEQ applies the NEQ predicate on the "summary" field.
func SummaryNEQ(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldSummary), v))
	})
}

// SummaryIn applies the In predicate on the "summary" field.
func SummaryIn(vs ...string) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldSummary), v...))
	})
}

// SummaryNotIn applies the NotIn predicate on the "summary" field.
func SummaryNotIn(vs ...string) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldSummary), v...))
	})
}

// SummaryGT applies the GT predicate on the "summary" field.
func SummaryGT(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldSummary), v))
	})
}

// SummaryGTE applies the GTE predicate on the "summary" field.
func SummaryGTE(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldSummary), v))
	})
}

// SummaryLT applies the LT predicate on the "summary" field.
func SummaryLT(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldSummary), v))
	})
}

// SummaryLTE applies the LTE predicate on the "summary" field.
func SummaryLTE(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldSummary), v))
	})
}

// SummaryContains applies the Contains predicate on the "summary" field.
func SummaryContains(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldSummary), v))
	})
}

// SummaryHasPrefix applies the HasPrefix predicate on the "summary" field.
func SummaryHasPrefix(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldSummary), v))
	})
}

// SummaryHasSuffix applies the HasSuffix predicate on the "summary" field.
func SummaryHasSuffix(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldSummary), v))
	})
}

// SummaryEqualFold applies the EqualFold predicate on the "summary" field.
func SummaryEqualFold(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldSummary), v))
	})
}

// SummaryContainsFold applies the ContainsFold predicate on the "summary" field.
func SummaryContainsFold(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldSummary), v))
	})
}

// AppearEpsEQ applies the EQ predicate on the "appear_eps" field.
func AppearEpsEQ(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldAppearEps), v))
	})
}

// AppearEpsNEQ applies the NEQ predicate on the "appear_eps" field.
func AppearEpsNEQ(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldAppearEps), v))
	})
}

// AppearEpsIn applies the In predicate on the "appear_eps" field.
func AppearEpsIn(vs ...string) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldAppearEps), v...))
	})
}

// AppearEpsNotIn applies the NotIn predicate on the "appear_eps" field.
func AppearEpsNotIn(vs ...string) predicate.PersonCsIndex {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldAppearEps), v...))
	})
}

// AppearEpsGT applies the GT predicate on the "appear_eps" field.
func AppearEpsGT(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldAppearEps), v))
	})
}

// AppearEpsGTE applies the GTE predicate on the "appear_eps" field.
func AppearEpsGTE(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldAppearEps), v))
	})
}

// AppearEpsLT applies the LT predicate on the "appear_eps" field.
func AppearEpsLT(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldAppearEps), v))
	})
}

// AppearEpsLTE applies the LTE predicate on the "appear_eps" field.
func AppearEpsLTE(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldAppearEps), v))
	})
}

// AppearEpsContains applies the Contains predicate on the "appear_eps" field.
func AppearEpsContains(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.Contains(s.C(FieldAppearEps), v))
	})
}

// AppearEpsHasPrefix applies the HasPrefix predicate on the "appear_eps" field.
func AppearEpsHasPrefix(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.HasPrefix(s.C(FieldAppearEps), v))
	})
}

// AppearEpsHasSuffix applies the HasSuffix predicate on the "appear_eps" field.
func AppearEpsHasSuffix(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.HasSuffix(s.C(FieldAppearEps), v))
	})
}

// AppearEpsEqualFold applies the EqualFold predicate on the "appear_eps" field.
func AppearEpsEqualFold(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.EqualFold(s.C(FieldAppearEps), v))
	})
}

// AppearEpsContainsFold applies the ContainsFold predicate on the "appear_eps" field.
func AppearEpsContainsFold(v string) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s.Where(sql.ContainsFold(s.C(FieldAppearEps), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.PersonCsIndex) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.PersonCsIndex) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.PersonCsIndex) predicate.PersonCsIndex {
	return predicate.PersonCsIndex(func(s *sql.Selector) {
		p(s.Not())
	})
}
