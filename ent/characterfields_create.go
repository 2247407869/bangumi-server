// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/characterfields"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharacterFieldsCreate is the builder for creating a CharacterFields entity.
type CharacterFieldsCreate struct {
	config
	mutation *CharacterFieldsMutation
	hooks    []Hook
}

// SetPrsnCat sets the "prsn_cat" field.
func (cfc *CharacterFieldsCreate) SetPrsnCat(cc characterfields.PrsnCat) *CharacterFieldsCreate {
	cfc.mutation.SetPrsnCat(cc)
	return cfc
}

// SetGender sets the "gender" field.
func (cfc *CharacterFieldsCreate) SetGender(i int) *CharacterFieldsCreate {
	cfc.mutation.SetGender(i)
	return cfc
}

// SetBloodtype sets the "bloodtype" field.
func (cfc *CharacterFieldsCreate) SetBloodtype(i int) *CharacterFieldsCreate {
	cfc.mutation.SetBloodtype(i)
	return cfc
}

// SetBirthYear sets the "birth_year" field.
func (cfc *CharacterFieldsCreate) SetBirthYear(i int) *CharacterFieldsCreate {
	cfc.mutation.SetBirthYear(i)
	return cfc
}

// SetBirthMon sets the "birth_mon" field.
func (cfc *CharacterFieldsCreate) SetBirthMon(i int) *CharacterFieldsCreate {
	cfc.mutation.SetBirthMon(i)
	return cfc
}

// SetBirthDay sets the "birth_day" field.
func (cfc *CharacterFieldsCreate) SetBirthDay(i int) *CharacterFieldsCreate {
	cfc.mutation.SetBirthDay(i)
	return cfc
}

// SetID sets the "id" field.
func (cfc *CharacterFieldsCreate) SetID(u uint8) *CharacterFieldsCreate {
	cfc.mutation.SetID(u)
	return cfc
}

// Mutation returns the CharacterFieldsMutation object of the builder.
func (cfc *CharacterFieldsCreate) Mutation() *CharacterFieldsMutation {
	return cfc.mutation
}

// Save creates the CharacterFields in the database.
func (cfc *CharacterFieldsCreate) Save(ctx context.Context) (*CharacterFields, error) {
	var (
		err  error
		node *CharacterFields
	)
	if len(cfc.hooks) == 0 {
		if err = cfc.check(); err != nil {
			return nil, err
		}
		node, err = cfc.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterFieldsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfc.check(); err != nil {
				return nil, err
			}
			cfc.mutation = mutation
			if node, err = cfc.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(cfc.hooks) - 1; i >= 0; i-- {
			if cfc.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfc.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfc.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (cfc *CharacterFieldsCreate) SaveX(ctx context.Context) *CharacterFields {
	v, err := cfc.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfc *CharacterFieldsCreate) Exec(ctx context.Context) error {
	_, err := cfc.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfc *CharacterFieldsCreate) ExecX(ctx context.Context) {
	if err := cfc.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfc *CharacterFieldsCreate) check() error {
	if _, ok := cfc.mutation.PrsnCat(); !ok {
		return &ValidationError{Name: "prsn_cat", err: errors.New(`ent: missing required field "prsn_cat"`)}
	}
	if v, ok := cfc.mutation.PrsnCat(); ok {
		if err := characterfields.PrsnCatValidator(v); err != nil {
			return &ValidationError{Name: "prsn_cat", err: fmt.Errorf(`ent: validator failed for field "prsn_cat": %w`, err)}
		}
	}
	if _, ok := cfc.mutation.Gender(); !ok {
		return &ValidationError{Name: "gender", err: errors.New(`ent: missing required field "gender"`)}
	}
	if _, ok := cfc.mutation.Bloodtype(); !ok {
		return &ValidationError{Name: "bloodtype", err: errors.New(`ent: missing required field "bloodtype"`)}
	}
	if _, ok := cfc.mutation.BirthYear(); !ok {
		return &ValidationError{Name: "birth_year", err: errors.New(`ent: missing required field "birth_year"`)}
	}
	if _, ok := cfc.mutation.BirthMon(); !ok {
		return &ValidationError{Name: "birth_mon", err: errors.New(`ent: missing required field "birth_mon"`)}
	}
	if _, ok := cfc.mutation.BirthDay(); !ok {
		return &ValidationError{Name: "birth_day", err: errors.New(`ent: missing required field "birth_day"`)}
	}
	return nil
}

func (cfc *CharacterFieldsCreate) sqlSave(ctx context.Context) (*CharacterFields, error) {
	_node, _spec := cfc.createSpec()
	if err := sqlgraph.CreateNode(ctx, cfc.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint8(id)
	}
	return _node, nil
}

func (cfc *CharacterFieldsCreate) createSpec() (*CharacterFields, *sqlgraph.CreateSpec) {
	var (
		_node = &CharacterFields{config: cfc.config}
		_spec = &sqlgraph.CreateSpec{
			Table: characterfields.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint8,
				Column: characterfields.FieldID,
			},
		}
	)
	if id, ok := cfc.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := cfc.mutation.PrsnCat(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: characterfields.FieldPrsnCat,
		})
		_node.PrsnCat = value
	}
	if value, ok := cfc.mutation.Gender(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldGender,
		})
		_node.Gender = value
	}
	if value, ok := cfc.mutation.Bloodtype(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBloodtype,
		})
		_node.Bloodtype = value
	}
	if value, ok := cfc.mutation.BirthYear(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthYear,
		})
		_node.BirthYear = value
	}
	if value, ok := cfc.mutation.BirthMon(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthMon,
		})
		_node.BirthMon = value
	}
	if value, ok := cfc.mutation.BirthDay(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthDay,
		})
		_node.BirthDay = value
	}
	return _node, _spec
}

// CharacterFieldsCreateBulk is the builder for creating many CharacterFields entities in bulk.
type CharacterFieldsCreateBulk struct {
	config
	builders []*CharacterFieldsCreate
}

// Save creates the CharacterFields entities in the database.
func (cfcb *CharacterFieldsCreateBulk) Save(ctx context.Context) ([]*CharacterFields, error) {
	specs := make([]*sqlgraph.CreateSpec, len(cfcb.builders))
	nodes := make([]*CharacterFields, len(cfcb.builders))
	mutators := make([]Mutator, len(cfcb.builders))
	for i := range cfcb.builders {
		func(i int, root context.Context) {
			builder := cfcb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*CharacterFieldsMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, cfcb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, cfcb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint8(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, cfcb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (cfcb *CharacterFieldsCreateBulk) SaveX(ctx context.Context) []*CharacterFields {
	v, err := cfcb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (cfcb *CharacterFieldsCreateBulk) Exec(ctx context.Context) error {
	_, err := cfcb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfcb *CharacterFieldsCreateBulk) ExecX(ctx context.Context) {
	if err := cfcb.Exec(ctx); err != nil {
		panic(err)
	}
}
