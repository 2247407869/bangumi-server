// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/personcsindex"
	"context"
	"errors"
	"fmt"

	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonCsIndexCreate is the builder for creating a PersonCsIndex entity.
type PersonCsIndexCreate struct {
	config
	mutation *PersonCsIndexMutation
	hooks    []Hook
}

// SetPrsnType sets the "prsn_type" field.
func (pcic *PersonCsIndexCreate) SetPrsnType(pt personcsindex.PrsnType) *PersonCsIndexCreate {
	pcic.mutation.SetPrsnType(pt)
	return pcic
}

// SetPrsnPosition sets the "prsn_position" field.
func (pcic *PersonCsIndexCreate) SetPrsnPosition(i int) *PersonCsIndexCreate {
	pcic.mutation.SetPrsnPosition(i)
	return pcic
}

// SetSubjectID sets the "subject_id" field.
func (pcic *PersonCsIndexCreate) SetSubjectID(i int) *PersonCsIndexCreate {
	pcic.mutation.SetSubjectID(i)
	return pcic
}

// SetSubjectTypeID sets the "subject_type_id" field.
func (pcic *PersonCsIndexCreate) SetSubjectTypeID(i int) *PersonCsIndexCreate {
	pcic.mutation.SetSubjectTypeID(i)
	return pcic
}

// SetSummary sets the "summary" field.
func (pcic *PersonCsIndexCreate) SetSummary(s string) *PersonCsIndexCreate {
	pcic.mutation.SetSummary(s)
	return pcic
}

// SetAppearEps sets the "appear_eps" field.
func (pcic *PersonCsIndexCreate) SetAppearEps(s string) *PersonCsIndexCreate {
	pcic.mutation.SetAppearEps(s)
	return pcic
}

// SetID sets the "id" field.
func (pcic *PersonCsIndexCreate) SetID(u uint8) *PersonCsIndexCreate {
	pcic.mutation.SetID(u)
	return pcic
}

// Mutation returns the PersonCsIndexMutation object of the builder.
func (pcic *PersonCsIndexCreate) Mutation() *PersonCsIndexMutation {
	return pcic.mutation
}

// Save creates the PersonCsIndex in the database.
func (pcic *PersonCsIndexCreate) Save(ctx context.Context) (*PersonCsIndex, error) {
	var (
		err  error
		node *PersonCsIndex
	)
	if len(pcic.hooks) == 0 {
		if err = pcic.check(); err != nil {
			return nil, err
		}
		node, err = pcic.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonCsIndexMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pcic.check(); err != nil {
				return nil, err
			}
			pcic.mutation = mutation
			if node, err = pcic.sqlSave(ctx); err != nil {
				return nil, err
			}
			mutation.id = &node.ID
			mutation.done = true
			return node, err
		})
		for i := len(pcic.hooks) - 1; i >= 0; i-- {
			if pcic.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pcic.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pcic.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX calls Save and panics if Save returns an error.
func (pcic *PersonCsIndexCreate) SaveX(ctx context.Context) *PersonCsIndex {
	v, err := pcic.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcic *PersonCsIndexCreate) Exec(ctx context.Context) error {
	_, err := pcic.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcic *PersonCsIndexCreate) ExecX(ctx context.Context) {
	if err := pcic.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pcic *PersonCsIndexCreate) check() error {
	if _, ok := pcic.mutation.PrsnType(); !ok {
		return &ValidationError{Name: "prsn_type", err: errors.New(`ent: missing required field "prsn_type"`)}
	}
	if v, ok := pcic.mutation.PrsnType(); ok {
		if err := personcsindex.PrsnTypeValidator(v); err != nil {
			return &ValidationError{Name: "prsn_type", err: fmt.Errorf(`ent: validator failed for field "prsn_type": %w`, err)}
		}
	}
	if _, ok := pcic.mutation.PrsnPosition(); !ok {
		return &ValidationError{Name: "prsn_position", err: errors.New(`ent: missing required field "prsn_position"`)}
	}
	if _, ok := pcic.mutation.SubjectID(); !ok {
		return &ValidationError{Name: "subject_id", err: errors.New(`ent: missing required field "subject_id"`)}
	}
	if _, ok := pcic.mutation.SubjectTypeID(); !ok {
		return &ValidationError{Name: "subject_type_id", err: errors.New(`ent: missing required field "subject_type_id"`)}
	}
	if _, ok := pcic.mutation.Summary(); !ok {
		return &ValidationError{Name: "summary", err: errors.New(`ent: missing required field "summary"`)}
	}
	if _, ok := pcic.mutation.AppearEps(); !ok {
		return &ValidationError{Name: "appear_eps", err: errors.New(`ent: missing required field "appear_eps"`)}
	}
	return nil
}

func (pcic *PersonCsIndexCreate) sqlSave(ctx context.Context) (*PersonCsIndex, error) {
	_node, _spec := pcic.createSpec()
	if err := sqlgraph.CreateNode(ctx, pcic.driver, _spec); err != nil {
		if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	if _spec.ID.Value != _node.ID {
		id := _spec.ID.Value.(int64)
		_node.ID = uint8(id)
	}
	return _node, nil
}

func (pcic *PersonCsIndexCreate) createSpec() (*PersonCsIndex, *sqlgraph.CreateSpec) {
	var (
		_node = &PersonCsIndex{config: pcic.config}
		_spec = &sqlgraph.CreateSpec{
			Table: personcsindex.Table,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint8,
				Column: personcsindex.FieldID,
			},
		}
	)
	if id, ok := pcic.mutation.ID(); ok {
		_node.ID = id
		_spec.ID.Value = id
	}
	if value, ok := pcic.mutation.PrsnType(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: personcsindex.FieldPrsnType,
		})
		_node.PrsnType = value
	}
	if value, ok := pcic.mutation.PrsnPosition(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldPrsnPosition,
		})
		_node.PrsnPosition = value
	}
	if value, ok := pcic.mutation.SubjectID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectID,
		})
		_node.SubjectID = value
	}
	if value, ok := pcic.mutation.SubjectTypeID(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: personcsindex.FieldSubjectTypeID,
		})
		_node.SubjectTypeID = value
	}
	if value, ok := pcic.mutation.Summary(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personcsindex.FieldSummary,
		})
		_node.Summary = value
	}
	if value, ok := pcic.mutation.AppearEps(); ok {
		_spec.Fields = append(_spec.Fields, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: personcsindex.FieldAppearEps,
		})
		_node.AppearEps = value
	}
	return _node, _spec
}

// PersonCsIndexCreateBulk is the builder for creating many PersonCsIndex entities in bulk.
type PersonCsIndexCreateBulk struct {
	config
	builders []*PersonCsIndexCreate
}

// Save creates the PersonCsIndex entities in the database.
func (pcicb *PersonCsIndexCreateBulk) Save(ctx context.Context) ([]*PersonCsIndex, error) {
	specs := make([]*sqlgraph.CreateSpec, len(pcicb.builders))
	nodes := make([]*PersonCsIndex, len(pcicb.builders))
	mutators := make([]Mutator, len(pcicb.builders))
	for i := range pcicb.builders {
		func(i int, root context.Context) {
			builder := pcicb.builders[i]
			var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
				mutation, ok := m.(*PersonCsIndexMutation)
				if !ok {
					return nil, fmt.Errorf("unexpected mutation type %T", m)
				}
				if err := builder.check(); err != nil {
					return nil, err
				}
				builder.mutation = mutation
				nodes[i], specs[i] = builder.createSpec()
				var err error
				if i < len(mutators)-1 {
					_, err = mutators[i+1].Mutate(root, pcicb.builders[i+1].mutation)
				} else {
					spec := &sqlgraph.BatchCreateSpec{Nodes: specs}
					// Invoke the actual operation on the latest mutation in the chain.
					if err = sqlgraph.BatchCreate(ctx, pcicb.driver, spec); err != nil {
						if sqlgraph.IsConstraintError(err) {
							err = &ConstraintError{err.Error(), err}
						}
					}
				}
				if err != nil {
					return nil, err
				}
				mutation.id = &nodes[i].ID
				mutation.done = true
				if specs[i].ID.Value != nil && nodes[i].ID == 0 {
					id := specs[i].ID.Value.(int64)
					nodes[i].ID = uint8(id)
				}
				return nodes[i], nil
			})
			for i := len(builder.hooks) - 1; i >= 0; i-- {
				mut = builder.hooks[i](mut)
			}
			mutators[i] = mut
		}(i, ctx)
	}
	if len(mutators) > 0 {
		if _, err := mutators[0].Mutate(ctx, pcicb.builders[0].mutation); err != nil {
			return nil, err
		}
	}
	return nodes, nil
}

// SaveX is like Save, but panics if an error occurs.
func (pcicb *PersonCsIndexCreateBulk) SaveX(ctx context.Context) []*PersonCsIndex {
	v, err := pcicb.Save(ctx)
	if err != nil {
		panic(err)
	}
	return v
}

// Exec executes the query.
func (pcicb *PersonCsIndexCreateBulk) Exec(ctx context.Context) error {
	_, err := pcicb.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pcicb *PersonCsIndexCreateBulk) ExecX(ctx context.Context) {
	if err := pcicb.Exec(ctx); err != nil {
		panic(err)
	}
}
