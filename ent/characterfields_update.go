// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/characterfields"
	"app/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// CharacterFieldsUpdate is the builder for updating CharacterFields entities.
type CharacterFieldsUpdate struct {
	config
	hooks    []Hook
	mutation *CharacterFieldsMutation
}

// Where appends a list predicates to the CharacterFieldsUpdate builder.
func (cfu *CharacterFieldsUpdate) Where(ps ...predicate.CharacterFields) *CharacterFieldsUpdate {
	cfu.mutation.Where(ps...)
	return cfu
}

// SetPrsnCat sets the "prsn_cat" field.
func (cfu *CharacterFieldsUpdate) SetPrsnCat(cc characterfields.PrsnCat) *CharacterFieldsUpdate {
	cfu.mutation.SetPrsnCat(cc)
	return cfu
}

// SetGender sets the "gender" field.
func (cfu *CharacterFieldsUpdate) SetGender(i int) *CharacterFieldsUpdate {
	cfu.mutation.ResetGender()
	cfu.mutation.SetGender(i)
	return cfu
}

// AddGender adds i to the "gender" field.
func (cfu *CharacterFieldsUpdate) AddGender(i int) *CharacterFieldsUpdate {
	cfu.mutation.AddGender(i)
	return cfu
}

// SetBloodtype sets the "bloodtype" field.
func (cfu *CharacterFieldsUpdate) SetBloodtype(i int) *CharacterFieldsUpdate {
	cfu.mutation.ResetBloodtype()
	cfu.mutation.SetBloodtype(i)
	return cfu
}

// AddBloodtype adds i to the "bloodtype" field.
func (cfu *CharacterFieldsUpdate) AddBloodtype(i int) *CharacterFieldsUpdate {
	cfu.mutation.AddBloodtype(i)
	return cfu
}

// SetBirthYear sets the "birth_year" field.
func (cfu *CharacterFieldsUpdate) SetBirthYear(i int) *CharacterFieldsUpdate {
	cfu.mutation.ResetBirthYear()
	cfu.mutation.SetBirthYear(i)
	return cfu
}

// AddBirthYear adds i to the "birth_year" field.
func (cfu *CharacterFieldsUpdate) AddBirthYear(i int) *CharacterFieldsUpdate {
	cfu.mutation.AddBirthYear(i)
	return cfu
}

// SetBirthMon sets the "birth_mon" field.
func (cfu *CharacterFieldsUpdate) SetBirthMon(i int) *CharacterFieldsUpdate {
	cfu.mutation.ResetBirthMon()
	cfu.mutation.SetBirthMon(i)
	return cfu
}

// AddBirthMon adds i to the "birth_mon" field.
func (cfu *CharacterFieldsUpdate) AddBirthMon(i int) *CharacterFieldsUpdate {
	cfu.mutation.AddBirthMon(i)
	return cfu
}

// SetBirthDay sets the "birth_day" field.
func (cfu *CharacterFieldsUpdate) SetBirthDay(i int) *CharacterFieldsUpdate {
	cfu.mutation.ResetBirthDay()
	cfu.mutation.SetBirthDay(i)
	return cfu
}

// AddBirthDay adds i to the "birth_day" field.
func (cfu *CharacterFieldsUpdate) AddBirthDay(i int) *CharacterFieldsUpdate {
	cfu.mutation.AddBirthDay(i)
	return cfu
}

// Mutation returns the CharacterFieldsMutation object of the builder.
func (cfu *CharacterFieldsUpdate) Mutation() *CharacterFieldsMutation {
	return cfu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (cfu *CharacterFieldsUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(cfu.hooks) == 0 {
		if err = cfu.check(); err != nil {
			return 0, err
		}
		affected, err = cfu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterFieldsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfu.check(); err != nil {
				return 0, err
			}
			cfu.mutation = mutation
			affected, err = cfu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(cfu.hooks) - 1; i >= 0; i-- {
			if cfu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfu *CharacterFieldsUpdate) SaveX(ctx context.Context) int {
	affected, err := cfu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (cfu *CharacterFieldsUpdate) Exec(ctx context.Context) error {
	_, err := cfu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfu *CharacterFieldsUpdate) ExecX(ctx context.Context) {
	if err := cfu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfu *CharacterFieldsUpdate) check() error {
	if v, ok := cfu.mutation.PrsnCat(); ok {
		if err := characterfields.PrsnCatValidator(v); err != nil {
			return &ValidationError{Name: "prsn_cat", err: fmt.Errorf("ent: validator failed for field \"prsn_cat\": %w", err)}
		}
	}
	return nil
}

func (cfu *CharacterFieldsUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   characterfields.Table,
			Columns: characterfields.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint8,
				Column: characterfields.FieldID,
			},
		},
	}
	if ps := cfu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfu.mutation.PrsnCat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: characterfields.FieldPrsnCat,
		})
	}
	if value, ok := cfu.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldGender,
		})
	}
	if value, ok := cfu.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldGender,
		})
	}
	if value, ok := cfu.mutation.Bloodtype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBloodtype,
		})
	}
	if value, ok := cfu.mutation.AddedBloodtype(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBloodtype,
		})
	}
	if value, ok := cfu.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthYear,
		})
	}
	if value, ok := cfu.mutation.AddedBirthYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthYear,
		})
	}
	if value, ok := cfu.mutation.BirthMon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthMon,
		})
	}
	if value, ok := cfu.mutation.AddedBirthMon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthMon,
		})
	}
	if value, ok := cfu.mutation.BirthDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthDay,
		})
	}
	if value, ok := cfu.mutation.AddedBirthDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthDay,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, cfu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{characterfields.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// CharacterFieldsUpdateOne is the builder for updating a single CharacterFields entity.
type CharacterFieldsUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *CharacterFieldsMutation
}

// SetPrsnCat sets the "prsn_cat" field.
func (cfuo *CharacterFieldsUpdateOne) SetPrsnCat(cc characterfields.PrsnCat) *CharacterFieldsUpdateOne {
	cfuo.mutation.SetPrsnCat(cc)
	return cfuo
}

// SetGender sets the "gender" field.
func (cfuo *CharacterFieldsUpdateOne) SetGender(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.ResetGender()
	cfuo.mutation.SetGender(i)
	return cfuo
}

// AddGender adds i to the "gender" field.
func (cfuo *CharacterFieldsUpdateOne) AddGender(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.AddGender(i)
	return cfuo
}

// SetBloodtype sets the "bloodtype" field.
func (cfuo *CharacterFieldsUpdateOne) SetBloodtype(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.ResetBloodtype()
	cfuo.mutation.SetBloodtype(i)
	return cfuo
}

// AddBloodtype adds i to the "bloodtype" field.
func (cfuo *CharacterFieldsUpdateOne) AddBloodtype(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.AddBloodtype(i)
	return cfuo
}

// SetBirthYear sets the "birth_year" field.
func (cfuo *CharacterFieldsUpdateOne) SetBirthYear(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.ResetBirthYear()
	cfuo.mutation.SetBirthYear(i)
	return cfuo
}

// AddBirthYear adds i to the "birth_year" field.
func (cfuo *CharacterFieldsUpdateOne) AddBirthYear(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.AddBirthYear(i)
	return cfuo
}

// SetBirthMon sets the "birth_mon" field.
func (cfuo *CharacterFieldsUpdateOne) SetBirthMon(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.ResetBirthMon()
	cfuo.mutation.SetBirthMon(i)
	return cfuo
}

// AddBirthMon adds i to the "birth_mon" field.
func (cfuo *CharacterFieldsUpdateOne) AddBirthMon(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.AddBirthMon(i)
	return cfuo
}

// SetBirthDay sets the "birth_day" field.
func (cfuo *CharacterFieldsUpdateOne) SetBirthDay(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.ResetBirthDay()
	cfuo.mutation.SetBirthDay(i)
	return cfuo
}

// AddBirthDay adds i to the "birth_day" field.
func (cfuo *CharacterFieldsUpdateOne) AddBirthDay(i int) *CharacterFieldsUpdateOne {
	cfuo.mutation.AddBirthDay(i)
	return cfuo
}

// Mutation returns the CharacterFieldsMutation object of the builder.
func (cfuo *CharacterFieldsUpdateOne) Mutation() *CharacterFieldsMutation {
	return cfuo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (cfuo *CharacterFieldsUpdateOne) Select(field string, fields ...string) *CharacterFieldsUpdateOne {
	cfuo.fields = append([]string{field}, fields...)
	return cfuo
}

// Save executes the query and returns the updated CharacterFields entity.
func (cfuo *CharacterFieldsUpdateOne) Save(ctx context.Context) (*CharacterFields, error) {
	var (
		err  error
		node *CharacterFields
	)
	if len(cfuo.hooks) == 0 {
		if err = cfuo.check(); err != nil {
			return nil, err
		}
		node, err = cfuo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*CharacterFieldsMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = cfuo.check(); err != nil {
				return nil, err
			}
			cfuo.mutation = mutation
			node, err = cfuo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(cfuo.hooks) - 1; i >= 0; i-- {
			if cfuo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = cfuo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, cfuo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (cfuo *CharacterFieldsUpdateOne) SaveX(ctx context.Context) *CharacterFields {
	node, err := cfuo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (cfuo *CharacterFieldsUpdateOne) Exec(ctx context.Context) error {
	_, err := cfuo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (cfuo *CharacterFieldsUpdateOne) ExecX(ctx context.Context) {
	if err := cfuo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (cfuo *CharacterFieldsUpdateOne) check() error {
	if v, ok := cfuo.mutation.PrsnCat(); ok {
		if err := characterfields.PrsnCatValidator(v); err != nil {
			return &ValidationError{Name: "prsn_cat", err: fmt.Errorf("ent: validator failed for field \"prsn_cat\": %w", err)}
		}
	}
	return nil
}

func (cfuo *CharacterFieldsUpdateOne) sqlSave(ctx context.Context) (_node *CharacterFields, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   characterfields.Table,
			Columns: characterfields.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeUint8,
				Column: characterfields.FieldID,
			},
		},
	}
	id, ok := cfuo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing CharacterFields.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := cfuo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, characterfields.FieldID)
		for _, f := range fields {
			if !characterfields.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != characterfields.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := cfuo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := cfuo.mutation.PrsnCat(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeEnum,
			Value:  value,
			Column: characterfields.FieldPrsnCat,
		})
	}
	if value, ok := cfuo.mutation.Gender(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldGender,
		})
	}
	if value, ok := cfuo.mutation.AddedGender(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldGender,
		})
	}
	if value, ok := cfuo.mutation.Bloodtype(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBloodtype,
		})
	}
	if value, ok := cfuo.mutation.AddedBloodtype(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBloodtype,
		})
	}
	if value, ok := cfuo.mutation.BirthYear(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthYear,
		})
	}
	if value, ok := cfuo.mutation.AddedBirthYear(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthYear,
		})
	}
	if value, ok := cfuo.mutation.BirthMon(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthMon,
		})
	}
	if value, ok := cfuo.mutation.AddedBirthMon(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthMon,
		})
	}
	if value, ok := cfuo.mutation.BirthDay(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthDay,
		})
	}
	if value, ok := cfuo.mutation.AddedBirthDay(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: characterfields.FieldBirthDay,
		})
	}
	_node = &CharacterFields{config: cfuo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, cfuo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{characterfields.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
