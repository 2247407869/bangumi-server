// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/person"
	"app/ent/predicate"
	"context"
	"fmt"

	"entgo.io/ent/dialect/sql"
	"entgo.io/ent/dialect/sql/sqlgraph"
	"entgo.io/ent/schema/field"
)

// PersonUpdate is the builder for updating Person entities.
type PersonUpdate struct {
	config
	hooks    []Hook
	mutation *PersonMutation
}

// Where appends a list predicates to the PersonUpdate builder.
func (pu *PersonUpdate) Where(ps ...predicate.Person) *PersonUpdate {
	pu.mutation.Where(ps...)
	return pu
}

// SetName sets the "name" field.
func (pu *PersonUpdate) SetName(s string) *PersonUpdate {
	pu.mutation.SetName(s)
	return pu
}

// SetType sets the "type" field.
func (pu *PersonUpdate) SetType(s string) *PersonUpdate {
	pu.mutation.SetType(s)
	return pu
}

// SetInfobox sets the "infobox" field.
func (pu *PersonUpdate) SetInfobox(s string) *PersonUpdate {
	pu.mutation.SetInfobox(s)
	return pu
}

// SetProducer sets the "producer" field.
func (pu *PersonUpdate) SetProducer(i int) *PersonUpdate {
	pu.mutation.ResetProducer()
	pu.mutation.SetProducer(i)
	return pu
}

// AddProducer adds i to the "producer" field.
func (pu *PersonUpdate) AddProducer(i int) *PersonUpdate {
	pu.mutation.AddProducer(i)
	return pu
}

// SetMangaka sets the "mangaka" field.
func (pu *PersonUpdate) SetMangaka(i int) *PersonUpdate {
	pu.mutation.ResetMangaka()
	pu.mutation.SetMangaka(i)
	return pu
}

// AddMangaka adds i to the "mangaka" field.
func (pu *PersonUpdate) AddMangaka(i int) *PersonUpdate {
	pu.mutation.AddMangaka(i)
	return pu
}

// SetArtist sets the "artist" field.
func (pu *PersonUpdate) SetArtist(i int) *PersonUpdate {
	pu.mutation.ResetArtist()
	pu.mutation.SetArtist(i)
	return pu
}

// AddArtist adds i to the "artist" field.
func (pu *PersonUpdate) AddArtist(i int) *PersonUpdate {
	pu.mutation.AddArtist(i)
	return pu
}

// SetSeiyu sets the "seiyu" field.
func (pu *PersonUpdate) SetSeiyu(i int) *PersonUpdate {
	pu.mutation.ResetSeiyu()
	pu.mutation.SetSeiyu(i)
	return pu
}

// AddSeiyu adds i to the "seiyu" field.
func (pu *PersonUpdate) AddSeiyu(i int) *PersonUpdate {
	pu.mutation.AddSeiyu(i)
	return pu
}

// SetWriter sets the "writer" field.
func (pu *PersonUpdate) SetWriter(i int) *PersonUpdate {
	pu.mutation.ResetWriter()
	pu.mutation.SetWriter(i)
	return pu
}

// AddWriter adds i to the "writer" field.
func (pu *PersonUpdate) AddWriter(i int) *PersonUpdate {
	pu.mutation.AddWriter(i)
	return pu
}

// SetIllustrator sets the "illustrator" field.
func (pu *PersonUpdate) SetIllustrator(i int) *PersonUpdate {
	pu.mutation.ResetIllustrator()
	pu.mutation.SetIllustrator(i)
	return pu
}

// AddIllustrator adds i to the "illustrator" field.
func (pu *PersonUpdate) AddIllustrator(i int) *PersonUpdate {
	pu.mutation.AddIllustrator(i)
	return pu
}

// SetActor sets the "actor" field.
func (pu *PersonUpdate) SetActor(i int) *PersonUpdate {
	pu.mutation.ResetActor()
	pu.mutation.SetActor(i)
	return pu
}

// AddActor adds i to the "actor" field.
func (pu *PersonUpdate) AddActor(i int) *PersonUpdate {
	pu.mutation.AddActor(i)
	return pu
}

// SetSummary sets the "summary" field.
func (pu *PersonUpdate) SetSummary(s string) *PersonUpdate {
	pu.mutation.SetSummary(s)
	return pu
}

// SetImg sets the "img" field.
func (pu *PersonUpdate) SetImg(s string) *PersonUpdate {
	pu.mutation.SetImg(s)
	return pu
}

// SetImgAnidb sets the "img_anidb" field.
func (pu *PersonUpdate) SetImgAnidb(s string) *PersonUpdate {
	pu.mutation.SetImgAnidb(s)
	return pu
}

// SetComment sets the "comment" field.
func (pu *PersonUpdate) SetComment(i int) *PersonUpdate {
	pu.mutation.ResetComment()
	pu.mutation.SetComment(i)
	return pu
}

// AddComment adds i to the "comment" field.
func (pu *PersonUpdate) AddComment(i int) *PersonUpdate {
	pu.mutation.AddComment(i)
	return pu
}

// SetCollects sets the "collects" field.
func (pu *PersonUpdate) SetCollects(i int) *PersonUpdate {
	pu.mutation.ResetCollects()
	pu.mutation.SetCollects(i)
	return pu
}

// AddCollects adds i to the "collects" field.
func (pu *PersonUpdate) AddCollects(i int) *PersonUpdate {
	pu.mutation.AddCollects(i)
	return pu
}

// SetDateline sets the "dateline" field.
func (pu *PersonUpdate) SetDateline(i int) *PersonUpdate {
	pu.mutation.ResetDateline()
	pu.mutation.SetDateline(i)
	return pu
}

// AddDateline adds i to the "dateline" field.
func (pu *PersonUpdate) AddDateline(i int) *PersonUpdate {
	pu.mutation.AddDateline(i)
	return pu
}

// SetLastpost sets the "lastpost" field.
func (pu *PersonUpdate) SetLastpost(i int) *PersonUpdate {
	pu.mutation.ResetLastpost()
	pu.mutation.SetLastpost(i)
	return pu
}

// AddLastpost adds i to the "lastpost" field.
func (pu *PersonUpdate) AddLastpost(i int) *PersonUpdate {
	pu.mutation.AddLastpost(i)
	return pu
}

// SetLock sets the "lock" field.
func (pu *PersonUpdate) SetLock(i int) *PersonUpdate {
	pu.mutation.ResetLock()
	pu.mutation.SetLock(i)
	return pu
}

// AddLock adds i to the "lock" field.
func (pu *PersonUpdate) AddLock(i int) *PersonUpdate {
	pu.mutation.AddLock(i)
	return pu
}

// SetAnidbID sets the "anidb_id" field.
func (pu *PersonUpdate) SetAnidbID(s string) *PersonUpdate {
	pu.mutation.SetAnidbID(s)
	return pu
}

// SetBan sets the "ban" field.
func (pu *PersonUpdate) SetBan(i int) *PersonUpdate {
	pu.mutation.ResetBan()
	pu.mutation.SetBan(i)
	return pu
}

// AddBan adds i to the "ban" field.
func (pu *PersonUpdate) AddBan(i int) *PersonUpdate {
	pu.mutation.AddBan(i)
	return pu
}

// SetRedirect sets the "redirect" field.
func (pu *PersonUpdate) SetRedirect(i int) *PersonUpdate {
	pu.mutation.ResetRedirect()
	pu.mutation.SetRedirect(i)
	return pu
}

// AddRedirect adds i to the "redirect" field.
func (pu *PersonUpdate) AddRedirect(i int) *PersonUpdate {
	pu.mutation.AddRedirect(i)
	return pu
}

// SetNsfw sets the "nsfw" field.
func (pu *PersonUpdate) SetNsfw(b bool) *PersonUpdate {
	pu.mutation.SetNsfw(b)
	return pu
}

// Mutation returns the PersonMutation object of the builder.
func (pu *PersonUpdate) Mutation() *PersonMutation {
	return pu.mutation
}

// Save executes the query and returns the number of nodes affected by the update operation.
func (pu *PersonUpdate) Save(ctx context.Context) (int, error) {
	var (
		err      error
		affected int
	)
	if len(pu.hooks) == 0 {
		if err = pu.check(); err != nil {
			return 0, err
		}
		affected, err = pu.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = pu.check(); err != nil {
				return 0, err
			}
			pu.mutation = mutation
			affected, err = pu.sqlSave(ctx)
			mutation.done = true
			return affected, err
		})
		for i := len(pu.hooks) - 1; i >= 0; i-- {
			if pu.hooks[i] == nil {
				return 0, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = pu.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, pu.mutation); err != nil {
			return 0, err
		}
	}
	return affected, err
}

// SaveX is like Save, but panics if an error occurs.
func (pu *PersonUpdate) SaveX(ctx context.Context) int {
	affected, err := pu.Save(ctx)
	if err != nil {
		panic(err)
	}
	return affected
}

// Exec executes the query.
func (pu *PersonUpdate) Exec(ctx context.Context) error {
	_, err := pu.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (pu *PersonUpdate) ExecX(ctx context.Context) {
	if err := pu.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (pu *PersonUpdate) check() error {
	if v, ok := pu.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := pu.mutation.Img(); ok {
		if err := person.ImgValidator(v); err != nil {
			return &ValidationError{Name: "img", err: fmt.Errorf("ent: validator failed for field \"img\": %w", err)}
		}
	}
	if v, ok := pu.mutation.ImgAnidb(); ok {
		if err := person.ImgAnidbValidator(v); err != nil {
			return &ValidationError{Name: "img_anidb", err: fmt.Errorf("ent: validator failed for field \"img_anidb\": %w", err)}
		}
	}
	return nil
}

func (pu *PersonUpdate) sqlSave(ctx context.Context) (n int, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	if ps := pu.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := pu.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := pu.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldType,
		})
	}
	if value, ok := pu.mutation.Infobox(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldInfobox,
		})
	}
	if value, ok := pu.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldProducer,
		})
	}
	if value, ok := pu.mutation.AddedProducer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldProducer,
		})
	}
	if value, ok := pu.mutation.Mangaka(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMangaka,
		})
	}
	if value, ok := pu.mutation.AddedMangaka(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMangaka,
		})
	}
	if value, ok := pu.mutation.Artist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldArtist,
		})
	}
	if value, ok := pu.mutation.AddedArtist(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldArtist,
		})
	}
	if value, ok := pu.mutation.Seiyu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldSeiyu,
		})
	}
	if value, ok := pu.mutation.AddedSeiyu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldSeiyu,
		})
	}
	if value, ok := pu.mutation.Writer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldWriter,
		})
	}
	if value, ok := pu.mutation.AddedWriter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldWriter,
		})
	}
	if value, ok := pu.mutation.Illustrator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldIllustrator,
		})
	}
	if value, ok := pu.mutation.AddedIllustrator(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldIllustrator,
		})
	}
	if value, ok := pu.mutation.Actor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldActor,
		})
	}
	if value, ok := pu.mutation.AddedActor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldActor,
		})
	}
	if value, ok := pu.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSummary,
		})
	}
	if value, ok := pu.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldImg,
		})
	}
	if value, ok := pu.mutation.ImgAnidb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldImgAnidb,
		})
	}
	if value, ok := pu.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldComment,
		})
	}
	if value, ok := pu.mutation.AddedComment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldComment,
		})
	}
	if value, ok := pu.mutation.Collects(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCollects,
		})
	}
	if value, ok := pu.mutation.AddedCollects(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCollects,
		})
	}
	if value, ok := pu.mutation.Dateline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldDateline,
		})
	}
	if value, ok := pu.mutation.AddedDateline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldDateline,
		})
	}
	if value, ok := pu.mutation.Lastpost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLastpost,
		})
	}
	if value, ok := pu.mutation.AddedLastpost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLastpost,
		})
	}
	if value, ok := pu.mutation.Lock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLock,
		})
	}
	if value, ok := pu.mutation.AddedLock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLock,
		})
	}
	if value, ok := pu.mutation.AnidbID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldAnidbID,
		})
	}
	if value, ok := pu.mutation.Ban(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldBan,
		})
	}
	if value, ok := pu.mutation.AddedBan(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldBan,
		})
	}
	if value, ok := pu.mutation.Redirect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldRedirect,
		})
	}
	if value, ok := pu.mutation.AddedRedirect(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldRedirect,
		})
	}
	if value, ok := pu.mutation.Nsfw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldNsfw,
		})
	}
	if n, err = sqlgraph.UpdateNodes(ctx, pu.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return 0, err
	}
	return n, nil
}

// PersonUpdateOne is the builder for updating a single Person entity.
type PersonUpdateOne struct {
	config
	fields   []string
	hooks    []Hook
	mutation *PersonMutation
}

// SetName sets the "name" field.
func (puo *PersonUpdateOne) SetName(s string) *PersonUpdateOne {
	puo.mutation.SetName(s)
	return puo
}

// SetType sets the "type" field.
func (puo *PersonUpdateOne) SetType(s string) *PersonUpdateOne {
	puo.mutation.SetType(s)
	return puo
}

// SetInfobox sets the "infobox" field.
func (puo *PersonUpdateOne) SetInfobox(s string) *PersonUpdateOne {
	puo.mutation.SetInfobox(s)
	return puo
}

// SetProducer sets the "producer" field.
func (puo *PersonUpdateOne) SetProducer(i int) *PersonUpdateOne {
	puo.mutation.ResetProducer()
	puo.mutation.SetProducer(i)
	return puo
}

// AddProducer adds i to the "producer" field.
func (puo *PersonUpdateOne) AddProducer(i int) *PersonUpdateOne {
	puo.mutation.AddProducer(i)
	return puo
}

// SetMangaka sets the "mangaka" field.
func (puo *PersonUpdateOne) SetMangaka(i int) *PersonUpdateOne {
	puo.mutation.ResetMangaka()
	puo.mutation.SetMangaka(i)
	return puo
}

// AddMangaka adds i to the "mangaka" field.
func (puo *PersonUpdateOne) AddMangaka(i int) *PersonUpdateOne {
	puo.mutation.AddMangaka(i)
	return puo
}

// SetArtist sets the "artist" field.
func (puo *PersonUpdateOne) SetArtist(i int) *PersonUpdateOne {
	puo.mutation.ResetArtist()
	puo.mutation.SetArtist(i)
	return puo
}

// AddArtist adds i to the "artist" field.
func (puo *PersonUpdateOne) AddArtist(i int) *PersonUpdateOne {
	puo.mutation.AddArtist(i)
	return puo
}

// SetSeiyu sets the "seiyu" field.
func (puo *PersonUpdateOne) SetSeiyu(i int) *PersonUpdateOne {
	puo.mutation.ResetSeiyu()
	puo.mutation.SetSeiyu(i)
	return puo
}

// AddSeiyu adds i to the "seiyu" field.
func (puo *PersonUpdateOne) AddSeiyu(i int) *PersonUpdateOne {
	puo.mutation.AddSeiyu(i)
	return puo
}

// SetWriter sets the "writer" field.
func (puo *PersonUpdateOne) SetWriter(i int) *PersonUpdateOne {
	puo.mutation.ResetWriter()
	puo.mutation.SetWriter(i)
	return puo
}

// AddWriter adds i to the "writer" field.
func (puo *PersonUpdateOne) AddWriter(i int) *PersonUpdateOne {
	puo.mutation.AddWriter(i)
	return puo
}

// SetIllustrator sets the "illustrator" field.
func (puo *PersonUpdateOne) SetIllustrator(i int) *PersonUpdateOne {
	puo.mutation.ResetIllustrator()
	puo.mutation.SetIllustrator(i)
	return puo
}

// AddIllustrator adds i to the "illustrator" field.
func (puo *PersonUpdateOne) AddIllustrator(i int) *PersonUpdateOne {
	puo.mutation.AddIllustrator(i)
	return puo
}

// SetActor sets the "actor" field.
func (puo *PersonUpdateOne) SetActor(i int) *PersonUpdateOne {
	puo.mutation.ResetActor()
	puo.mutation.SetActor(i)
	return puo
}

// AddActor adds i to the "actor" field.
func (puo *PersonUpdateOne) AddActor(i int) *PersonUpdateOne {
	puo.mutation.AddActor(i)
	return puo
}

// SetSummary sets the "summary" field.
func (puo *PersonUpdateOne) SetSummary(s string) *PersonUpdateOne {
	puo.mutation.SetSummary(s)
	return puo
}

// SetImg sets the "img" field.
func (puo *PersonUpdateOne) SetImg(s string) *PersonUpdateOne {
	puo.mutation.SetImg(s)
	return puo
}

// SetImgAnidb sets the "img_anidb" field.
func (puo *PersonUpdateOne) SetImgAnidb(s string) *PersonUpdateOne {
	puo.mutation.SetImgAnidb(s)
	return puo
}

// SetComment sets the "comment" field.
func (puo *PersonUpdateOne) SetComment(i int) *PersonUpdateOne {
	puo.mutation.ResetComment()
	puo.mutation.SetComment(i)
	return puo
}

// AddComment adds i to the "comment" field.
func (puo *PersonUpdateOne) AddComment(i int) *PersonUpdateOne {
	puo.mutation.AddComment(i)
	return puo
}

// SetCollects sets the "collects" field.
func (puo *PersonUpdateOne) SetCollects(i int) *PersonUpdateOne {
	puo.mutation.ResetCollects()
	puo.mutation.SetCollects(i)
	return puo
}

// AddCollects adds i to the "collects" field.
func (puo *PersonUpdateOne) AddCollects(i int) *PersonUpdateOne {
	puo.mutation.AddCollects(i)
	return puo
}

// SetDateline sets the "dateline" field.
func (puo *PersonUpdateOne) SetDateline(i int) *PersonUpdateOne {
	puo.mutation.ResetDateline()
	puo.mutation.SetDateline(i)
	return puo
}

// AddDateline adds i to the "dateline" field.
func (puo *PersonUpdateOne) AddDateline(i int) *PersonUpdateOne {
	puo.mutation.AddDateline(i)
	return puo
}

// SetLastpost sets the "lastpost" field.
func (puo *PersonUpdateOne) SetLastpost(i int) *PersonUpdateOne {
	puo.mutation.ResetLastpost()
	puo.mutation.SetLastpost(i)
	return puo
}

// AddLastpost adds i to the "lastpost" field.
func (puo *PersonUpdateOne) AddLastpost(i int) *PersonUpdateOne {
	puo.mutation.AddLastpost(i)
	return puo
}

// SetLock sets the "lock" field.
func (puo *PersonUpdateOne) SetLock(i int) *PersonUpdateOne {
	puo.mutation.ResetLock()
	puo.mutation.SetLock(i)
	return puo
}

// AddLock adds i to the "lock" field.
func (puo *PersonUpdateOne) AddLock(i int) *PersonUpdateOne {
	puo.mutation.AddLock(i)
	return puo
}

// SetAnidbID sets the "anidb_id" field.
func (puo *PersonUpdateOne) SetAnidbID(s string) *PersonUpdateOne {
	puo.mutation.SetAnidbID(s)
	return puo
}

// SetBan sets the "ban" field.
func (puo *PersonUpdateOne) SetBan(i int) *PersonUpdateOne {
	puo.mutation.ResetBan()
	puo.mutation.SetBan(i)
	return puo
}

// AddBan adds i to the "ban" field.
func (puo *PersonUpdateOne) AddBan(i int) *PersonUpdateOne {
	puo.mutation.AddBan(i)
	return puo
}

// SetRedirect sets the "redirect" field.
func (puo *PersonUpdateOne) SetRedirect(i int) *PersonUpdateOne {
	puo.mutation.ResetRedirect()
	puo.mutation.SetRedirect(i)
	return puo
}

// AddRedirect adds i to the "redirect" field.
func (puo *PersonUpdateOne) AddRedirect(i int) *PersonUpdateOne {
	puo.mutation.AddRedirect(i)
	return puo
}

// SetNsfw sets the "nsfw" field.
func (puo *PersonUpdateOne) SetNsfw(b bool) *PersonUpdateOne {
	puo.mutation.SetNsfw(b)
	return puo
}

// Mutation returns the PersonMutation object of the builder.
func (puo *PersonUpdateOne) Mutation() *PersonMutation {
	return puo.mutation
}

// Select allows selecting one or more fields (columns) of the returned entity.
// The default is selecting all fields defined in the entity schema.
func (puo *PersonUpdateOne) Select(field string, fields ...string) *PersonUpdateOne {
	puo.fields = append([]string{field}, fields...)
	return puo
}

// Save executes the query and returns the updated Person entity.
func (puo *PersonUpdateOne) Save(ctx context.Context) (*Person, error) {
	var (
		err  error
		node *Person
	)
	if len(puo.hooks) == 0 {
		if err = puo.check(); err != nil {
			return nil, err
		}
		node, err = puo.sqlSave(ctx)
	} else {
		var mut Mutator = MutateFunc(func(ctx context.Context, m Mutation) (Value, error) {
			mutation, ok := m.(*PersonMutation)
			if !ok {
				return nil, fmt.Errorf("unexpected mutation type %T", m)
			}
			if err = puo.check(); err != nil {
				return nil, err
			}
			puo.mutation = mutation
			node, err = puo.sqlSave(ctx)
			mutation.done = true
			return node, err
		})
		for i := len(puo.hooks) - 1; i >= 0; i-- {
			if puo.hooks[i] == nil {
				return nil, fmt.Errorf("ent: uninitialized hook (forgotten import ent/runtime?)")
			}
			mut = puo.hooks[i](mut)
		}
		if _, err := mut.Mutate(ctx, puo.mutation); err != nil {
			return nil, err
		}
	}
	return node, err
}

// SaveX is like Save, but panics if an error occurs.
func (puo *PersonUpdateOne) SaveX(ctx context.Context) *Person {
	node, err := puo.Save(ctx)
	if err != nil {
		panic(err)
	}
	return node
}

// Exec executes the query on the entity.
func (puo *PersonUpdateOne) Exec(ctx context.Context) error {
	_, err := puo.Save(ctx)
	return err
}

// ExecX is like Exec, but panics if an error occurs.
func (puo *PersonUpdateOne) ExecX(ctx context.Context) {
	if err := puo.Exec(ctx); err != nil {
		panic(err)
	}
}

// check runs all checks and user-defined validators on the builder.
func (puo *PersonUpdateOne) check() error {
	if v, ok := puo.mutation.Name(); ok {
		if err := person.NameValidator(v); err != nil {
			return &ValidationError{Name: "name", err: fmt.Errorf("ent: validator failed for field \"name\": %w", err)}
		}
	}
	if v, ok := puo.mutation.Img(); ok {
		if err := person.ImgValidator(v); err != nil {
			return &ValidationError{Name: "img", err: fmt.Errorf("ent: validator failed for field \"img\": %w", err)}
		}
	}
	if v, ok := puo.mutation.ImgAnidb(); ok {
		if err := person.ImgAnidbValidator(v); err != nil {
			return &ValidationError{Name: "img_anidb", err: fmt.Errorf("ent: validator failed for field \"img_anidb\": %w", err)}
		}
	}
	return nil
}

func (puo *PersonUpdateOne) sqlSave(ctx context.Context) (_node *Person, err error) {
	_spec := &sqlgraph.UpdateSpec{
		Node: &sqlgraph.NodeSpec{
			Table:   person.Table,
			Columns: person.Columns,
			ID: &sqlgraph.FieldSpec{
				Type:   field.TypeInt,
				Column: person.FieldID,
			},
		},
	}
	id, ok := puo.mutation.ID()
	if !ok {
		return nil, &ValidationError{Name: "ID", err: fmt.Errorf("missing Person.ID for update")}
	}
	_spec.Node.ID.Value = id
	if fields := puo.fields; len(fields) > 0 {
		_spec.Node.Columns = make([]string, 0, len(fields))
		_spec.Node.Columns = append(_spec.Node.Columns, person.FieldID)
		for _, f := range fields {
			if !person.ValidColumn(f) {
				return nil, &ValidationError{Name: f, err: fmt.Errorf("ent: invalid field %q for query", f)}
			}
			if f != person.FieldID {
				_spec.Node.Columns = append(_spec.Node.Columns, f)
			}
		}
	}
	if ps := puo.mutation.predicates; len(ps) > 0 {
		_spec.Predicate = func(selector *sql.Selector) {
			for i := range ps {
				ps[i](selector)
			}
		}
	}
	if value, ok := puo.mutation.Name(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldName,
		})
	}
	if value, ok := puo.mutation.GetType(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldType,
		})
	}
	if value, ok := puo.mutation.Infobox(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldInfobox,
		})
	}
	if value, ok := puo.mutation.Producer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldProducer,
		})
	}
	if value, ok := puo.mutation.AddedProducer(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldProducer,
		})
	}
	if value, ok := puo.mutation.Mangaka(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMangaka,
		})
	}
	if value, ok := puo.mutation.AddedMangaka(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldMangaka,
		})
	}
	if value, ok := puo.mutation.Artist(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldArtist,
		})
	}
	if value, ok := puo.mutation.AddedArtist(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldArtist,
		})
	}
	if value, ok := puo.mutation.Seiyu(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldSeiyu,
		})
	}
	if value, ok := puo.mutation.AddedSeiyu(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldSeiyu,
		})
	}
	if value, ok := puo.mutation.Writer(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldWriter,
		})
	}
	if value, ok := puo.mutation.AddedWriter(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldWriter,
		})
	}
	if value, ok := puo.mutation.Illustrator(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldIllustrator,
		})
	}
	if value, ok := puo.mutation.AddedIllustrator(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldIllustrator,
		})
	}
	if value, ok := puo.mutation.Actor(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldActor,
		})
	}
	if value, ok := puo.mutation.AddedActor(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldActor,
		})
	}
	if value, ok := puo.mutation.Summary(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldSummary,
		})
	}
	if value, ok := puo.mutation.Img(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldImg,
		})
	}
	if value, ok := puo.mutation.ImgAnidb(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldImgAnidb,
		})
	}
	if value, ok := puo.mutation.Comment(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldComment,
		})
	}
	if value, ok := puo.mutation.AddedComment(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldComment,
		})
	}
	if value, ok := puo.mutation.Collects(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCollects,
		})
	}
	if value, ok := puo.mutation.AddedCollects(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldCollects,
		})
	}
	if value, ok := puo.mutation.Dateline(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldDateline,
		})
	}
	if value, ok := puo.mutation.AddedDateline(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldDateline,
		})
	}
	if value, ok := puo.mutation.Lastpost(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLastpost,
		})
	}
	if value, ok := puo.mutation.AddedLastpost(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLastpost,
		})
	}
	if value, ok := puo.mutation.Lock(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLock,
		})
	}
	if value, ok := puo.mutation.AddedLock(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldLock,
		})
	}
	if value, ok := puo.mutation.AnidbID(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeString,
			Value:  value,
			Column: person.FieldAnidbID,
		})
	}
	if value, ok := puo.mutation.Ban(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldBan,
		})
	}
	if value, ok := puo.mutation.AddedBan(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldBan,
		})
	}
	if value, ok := puo.mutation.Redirect(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldRedirect,
		})
	}
	if value, ok := puo.mutation.AddedRedirect(); ok {
		_spec.Fields.Add = append(_spec.Fields.Add, &sqlgraph.FieldSpec{
			Type:   field.TypeInt,
			Value:  value,
			Column: person.FieldRedirect,
		})
	}
	if value, ok := puo.mutation.Nsfw(); ok {
		_spec.Fields.Set = append(_spec.Fields.Set, &sqlgraph.FieldSpec{
			Type:   field.TypeBool,
			Value:  value,
			Column: person.FieldNsfw,
		})
	}
	_node = &Person{config: puo.config}
	_spec.Assign = _node.assignValues
	_spec.ScanValues = _node.scanValues
	if err = sqlgraph.UpdateNode(ctx, puo.driver, _spec); err != nil {
		if _, ok := err.(*sqlgraph.NotFoundError); ok {
			err = &NotFoundError{person.Label}
		} else if sqlgraph.IsConstraintError(err) {
			err = &ConstraintError{err.Error(), err}
		}
		return nil, err
	}
	return _node, nil
}
