// Code generated by entc, DO NOT EDIT.

package ent

import (
	"context"
	"fmt"
	"log"

	"app/ent/migrate"

	"app/ent/characterfields"
	"app/ent/person"
	"app/ent/personcsindex"

	"entgo.io/ent/dialect"
	"entgo.io/ent/dialect/sql"
)

// Client is the client that holds all ent builders.
type Client struct {
	config
	// Schema is the client for creating, migrating and dropping schema.
	Schema *migrate.Schema
	// CharacterFields is the client for interacting with the CharacterFields builders.
	CharacterFields *CharacterFieldsClient
	// Person is the client for interacting with the Person builders.
	Person *PersonClient
	// PersonCsIndex is the client for interacting with the PersonCsIndex builders.
	PersonCsIndex *PersonCsIndexClient
}

// NewClient creates a new client configured with the given options.
func NewClient(opts ...Option) *Client {
	cfg := config{log: log.Println, hooks: &hooks{}}
	cfg.options(opts...)
	client := &Client{config: cfg}
	client.init()
	return client
}

func (c *Client) init() {
	c.Schema = migrate.NewSchema(c.driver)
	c.CharacterFields = NewCharacterFieldsClient(c.config)
	c.Person = NewPersonClient(c.config)
	c.PersonCsIndex = NewPersonCsIndexClient(c.config)
}

// Open opens a database/sql.DB specified by the driver name and
// the data source name, and returns a new client attached to it.
// Optional parameters can be added for configuring the client.
func Open(driverName, dataSourceName string, options ...Option) (*Client, error) {
	switch driverName {
	case dialect.MySQL, dialect.Postgres, dialect.SQLite:
		drv, err := sql.Open(driverName, dataSourceName)
		if err != nil {
			return nil, err
		}
		return NewClient(append(options, Driver(drv))...), nil
	default:
		return nil, fmt.Errorf("unsupported driver: %q", driverName)
	}
}

// Tx returns a new transactional client. The provided context
// is used until the transaction is committed or rolled back.
func (c *Client) Tx(ctx context.Context) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := newTx(ctx, c.driver)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = tx
	return &Tx{
		ctx:             ctx,
		config:          cfg,
		CharacterFields: NewCharacterFieldsClient(cfg),
		Person:          NewPersonClient(cfg),
		PersonCsIndex:   NewPersonCsIndexClient(cfg),
	}, nil
}

// BeginTx returns a transactional client with specified options.
func (c *Client) BeginTx(ctx context.Context, opts *sql.TxOptions) (*Tx, error) {
	if _, ok := c.driver.(*txDriver); ok {
		return nil, fmt.Errorf("ent: cannot start a transaction within a transaction")
	}
	tx, err := c.driver.(interface {
		BeginTx(context.Context, *sql.TxOptions) (dialect.Tx, error)
	}).BeginTx(ctx, opts)
	if err != nil {
		return nil, fmt.Errorf("ent: starting a transaction: %w", err)
	}
	cfg := c.config
	cfg.driver = &txDriver{tx: tx, drv: c.driver}
	return &Tx{
		config:          cfg,
		CharacterFields: NewCharacterFieldsClient(cfg),
		Person:          NewPersonClient(cfg),
		PersonCsIndex:   NewPersonCsIndexClient(cfg),
	}, nil
}

// Debug returns a new debug-client. It's used to get verbose logging on specific operations.
//
//	client.Debug().
//		CharacterFields.
//		Query().
//		Count(ctx)
//
func (c *Client) Debug() *Client {
	if c.debug {
		return c
	}
	cfg := c.config
	cfg.driver = dialect.Debug(c.driver, c.log)
	client := &Client{config: cfg}
	client.init()
	return client
}

// Close closes the database connection and prevents new queries from starting.
func (c *Client) Close() error {
	return c.driver.Close()
}

// Use adds the mutation hooks to all the entity clients.
// In order to add hooks to a specific client, call: `client.Node.Use(...)`.
func (c *Client) Use(hooks ...Hook) {
	c.CharacterFields.Use(hooks...)
	c.Person.Use(hooks...)
	c.PersonCsIndex.Use(hooks...)
}

// CharacterFieldsClient is a client for the CharacterFields schema.
type CharacterFieldsClient struct {
	config
}

// NewCharacterFieldsClient returns a client for the CharacterFields from the given config.
func NewCharacterFieldsClient(c config) *CharacterFieldsClient {
	return &CharacterFieldsClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `characterfields.Hooks(f(g(h())))`.
func (c *CharacterFieldsClient) Use(hooks ...Hook) {
	c.hooks.CharacterFields = append(c.hooks.CharacterFields, hooks...)
}

// Create returns a create builder for CharacterFields.
func (c *CharacterFieldsClient) Create() *CharacterFieldsCreate {
	mutation := newCharacterFieldsMutation(c.config, OpCreate)
	return &CharacterFieldsCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of CharacterFields entities.
func (c *CharacterFieldsClient) CreateBulk(builders ...*CharacterFieldsCreate) *CharacterFieldsCreateBulk {
	return &CharacterFieldsCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for CharacterFields.
func (c *CharacterFieldsClient) Update() *CharacterFieldsUpdate {
	mutation := newCharacterFieldsMutation(c.config, OpUpdate)
	return &CharacterFieldsUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *CharacterFieldsClient) UpdateOne(cf *CharacterFields) *CharacterFieldsUpdateOne {
	mutation := newCharacterFieldsMutation(c.config, OpUpdateOne, withCharacterFields(cf))
	return &CharacterFieldsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *CharacterFieldsClient) UpdateOneID(id uint8) *CharacterFieldsUpdateOne {
	mutation := newCharacterFieldsMutation(c.config, OpUpdateOne, withCharacterFieldsID(id))
	return &CharacterFieldsUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for CharacterFields.
func (c *CharacterFieldsClient) Delete() *CharacterFieldsDelete {
	mutation := newCharacterFieldsMutation(c.config, OpDelete)
	return &CharacterFieldsDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *CharacterFieldsClient) DeleteOne(cf *CharacterFields) *CharacterFieldsDeleteOne {
	return c.DeleteOneID(cf.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *CharacterFieldsClient) DeleteOneID(id uint8) *CharacterFieldsDeleteOne {
	builder := c.Delete().Where(characterfields.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &CharacterFieldsDeleteOne{builder}
}

// Query returns a query builder for CharacterFields.
func (c *CharacterFieldsClient) Query() *CharacterFieldsQuery {
	return &CharacterFieldsQuery{
		config: c.config,
	}
}

// Get returns a CharacterFields entity by its id.
func (c *CharacterFieldsClient) Get(ctx context.Context, id uint8) (*CharacterFields, error) {
	return c.Query().Where(characterfields.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *CharacterFieldsClient) GetX(ctx context.Context, id uint8) *CharacterFields {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *CharacterFieldsClient) Hooks() []Hook {
	return c.hooks.CharacterFields
}

// PersonClient is a client for the Person schema.
type PersonClient struct {
	config
}

// NewPersonClient returns a client for the Person from the given config.
func NewPersonClient(c config) *PersonClient {
	return &PersonClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `person.Hooks(f(g(h())))`.
func (c *PersonClient) Use(hooks ...Hook) {
	c.hooks.Person = append(c.hooks.Person, hooks...)
}

// Create returns a create builder for Person.
func (c *PersonClient) Create() *PersonCreate {
	mutation := newPersonMutation(c.config, OpCreate)
	return &PersonCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of Person entities.
func (c *PersonClient) CreateBulk(builders ...*PersonCreate) *PersonCreateBulk {
	return &PersonCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for Person.
func (c *PersonClient) Update() *PersonUpdate {
	mutation := newPersonMutation(c.config, OpUpdate)
	return &PersonUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonClient) UpdateOne(pe *Person) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPerson(pe))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonClient) UpdateOneID(id int) *PersonUpdateOne {
	mutation := newPersonMutation(c.config, OpUpdateOne, withPersonID(id))
	return &PersonUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for Person.
func (c *PersonClient) Delete() *PersonDelete {
	mutation := newPersonMutation(c.config, OpDelete)
	return &PersonDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonClient) DeleteOne(pe *Person) *PersonDeleteOne {
	return c.DeleteOneID(pe.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonClient) DeleteOneID(id int) *PersonDeleteOne {
	builder := c.Delete().Where(person.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonDeleteOne{builder}
}

// Query returns a query builder for Person.
func (c *PersonClient) Query() *PersonQuery {
	return &PersonQuery{
		config: c.config,
	}
}

// Get returns a Person entity by its id.
func (c *PersonClient) Get(ctx context.Context, id int) (*Person, error) {
	return c.Query().Where(person.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonClient) GetX(ctx context.Context, id int) *Person {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PersonClient) Hooks() []Hook {
	return c.hooks.Person
}

// PersonCsIndexClient is a client for the PersonCsIndex schema.
type PersonCsIndexClient struct {
	config
}

// NewPersonCsIndexClient returns a client for the PersonCsIndex from the given config.
func NewPersonCsIndexClient(c config) *PersonCsIndexClient {
	return &PersonCsIndexClient{config: c}
}

// Use adds a list of mutation hooks to the hooks stack.
// A call to `Use(f, g, h)` equals to `personcsindex.Hooks(f(g(h())))`.
func (c *PersonCsIndexClient) Use(hooks ...Hook) {
	c.hooks.PersonCsIndex = append(c.hooks.PersonCsIndex, hooks...)
}

// Create returns a create builder for PersonCsIndex.
func (c *PersonCsIndexClient) Create() *PersonCsIndexCreate {
	mutation := newPersonCsIndexMutation(c.config, OpCreate)
	return &PersonCsIndexCreate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// CreateBulk returns a builder for creating a bulk of PersonCsIndex entities.
func (c *PersonCsIndexClient) CreateBulk(builders ...*PersonCsIndexCreate) *PersonCsIndexCreateBulk {
	return &PersonCsIndexCreateBulk{config: c.config, builders: builders}
}

// Update returns an update builder for PersonCsIndex.
func (c *PersonCsIndexClient) Update() *PersonCsIndexUpdate {
	mutation := newPersonCsIndexMutation(c.config, OpUpdate)
	return &PersonCsIndexUpdate{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOne returns an update builder for the given entity.
func (c *PersonCsIndexClient) UpdateOne(pci *PersonCsIndex) *PersonCsIndexUpdateOne {
	mutation := newPersonCsIndexMutation(c.config, OpUpdateOne, withPersonCsIndex(pci))
	return &PersonCsIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// UpdateOneID returns an update builder for the given id.
func (c *PersonCsIndexClient) UpdateOneID(id uint8) *PersonCsIndexUpdateOne {
	mutation := newPersonCsIndexMutation(c.config, OpUpdateOne, withPersonCsIndexID(id))
	return &PersonCsIndexUpdateOne{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// Delete returns a delete builder for PersonCsIndex.
func (c *PersonCsIndexClient) Delete() *PersonCsIndexDelete {
	mutation := newPersonCsIndexMutation(c.config, OpDelete)
	return &PersonCsIndexDelete{config: c.config, hooks: c.Hooks(), mutation: mutation}
}

// DeleteOne returns a delete builder for the given entity.
func (c *PersonCsIndexClient) DeleteOne(pci *PersonCsIndex) *PersonCsIndexDeleteOne {
	return c.DeleteOneID(pci.ID)
}

// DeleteOneID returns a delete builder for the given id.
func (c *PersonCsIndexClient) DeleteOneID(id uint8) *PersonCsIndexDeleteOne {
	builder := c.Delete().Where(personcsindex.ID(id))
	builder.mutation.id = &id
	builder.mutation.op = OpDeleteOne
	return &PersonCsIndexDeleteOne{builder}
}

// Query returns a query builder for PersonCsIndex.
func (c *PersonCsIndexClient) Query() *PersonCsIndexQuery {
	return &PersonCsIndexQuery{
		config: c.config,
	}
}

// Get returns a PersonCsIndex entity by its id.
func (c *PersonCsIndexClient) Get(ctx context.Context, id uint8) (*PersonCsIndex, error) {
	return c.Query().Where(personcsindex.ID(id)).Only(ctx)
}

// GetX is like Get, but panics if an error occurs.
func (c *PersonCsIndexClient) GetX(ctx context.Context, id uint8) *PersonCsIndex {
	obj, err := c.Get(ctx, id)
	if err != nil {
		panic(err)
	}
	return obj
}

// Hooks returns the client hooks.
func (c *PersonCsIndexClient) Hooks() []Hook {
	return c.hooks.PersonCsIndex
}
