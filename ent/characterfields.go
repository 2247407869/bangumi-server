// Code generated by entc, DO NOT EDIT.

package ent

import (
	"app/ent/characterfields"
	"fmt"
	"strings"

	"entgo.io/ent/dialect/sql"
)

// CharacterFields is the model entity for the CharacterFields schema.
type CharacterFields struct {
	config `json:"-"`
	// ID of the ent.
	ID uint8 `json:"id,omitempty"`
	// PrsnCat holds the value of the "prsn_cat" field.
	PrsnCat characterfields.PrsnCat `json:"-"`
	// Gender holds the value of the "gender" field.
	Gender int `json:"gender,omitempty"`
	// Bloodtype holds the value of the "bloodtype" field.
	Bloodtype int `json:"bloodtype,omitempty"`
	// BirthYear holds the value of the "birth_year" field.
	BirthYear int `json:"birth_year,omitempty"`
	// BirthMon holds the value of the "birth_mon" field.
	BirthMon int `json:"birth_mon,omitempty"`
	// BirthDay holds the value of the "birth_day" field.
	BirthDay int `json:"birth_day,omitempty"`
}

// scanValues returns the types for scanning values from sql.Rows.
func (*CharacterFields) scanValues(columns []string) ([]interface{}, error) {
	values := make([]interface{}, len(columns))
	for i := range columns {
		switch columns[i] {
		case characterfields.FieldID, characterfields.FieldGender, characterfields.FieldBloodtype, characterfields.FieldBirthYear, characterfields.FieldBirthMon, characterfields.FieldBirthDay:
			values[i] = new(sql.NullInt64)
		case characterfields.FieldPrsnCat:
			values[i] = new(sql.NullString)
		default:
			return nil, fmt.Errorf("unexpected column %q for type CharacterFields", columns[i])
		}
	}
	return values, nil
}

// assignValues assigns the values that were returned from sql.Rows (after scanning)
// to the CharacterFields fields.
func (cf *CharacterFields) assignValues(columns []string, values []interface{}) error {
	if m, n := len(values), len(columns); m < n {
		return fmt.Errorf("mismatch number of scan values: %d != %d", m, n)
	}
	for i := range columns {
		switch columns[i] {
		case characterfields.FieldID:
			value, ok := values[i].(*sql.NullInt64)
			if !ok {
				return fmt.Errorf("unexpected type %T for field id", value)
			}
			cf.ID = uint8(value.Int64)
		case characterfields.FieldPrsnCat:
			if value, ok := values[i].(*sql.NullString); !ok {
				return fmt.Errorf("unexpected type %T for field prsn_cat", values[i])
			} else if value.Valid {
				cf.PrsnCat = characterfields.PrsnCat(value.String)
			}
		case characterfields.FieldGender:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field gender", values[i])
			} else if value.Valid {
				cf.Gender = int(value.Int64)
			}
		case characterfields.FieldBloodtype:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field bloodtype", values[i])
			} else if value.Valid {
				cf.Bloodtype = int(value.Int64)
			}
		case characterfields.FieldBirthYear:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birth_year", values[i])
			} else if value.Valid {
				cf.BirthYear = int(value.Int64)
			}
		case characterfields.FieldBirthMon:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birth_mon", values[i])
			} else if value.Valid {
				cf.BirthMon = int(value.Int64)
			}
		case characterfields.FieldBirthDay:
			if value, ok := values[i].(*sql.NullInt64); !ok {
				return fmt.Errorf("unexpected type %T for field birth_day", values[i])
			} else if value.Valid {
				cf.BirthDay = int(value.Int64)
			}
		}
	}
	return nil
}

// Update returns a builder for updating this CharacterFields.
// Note that you need to call CharacterFields.Unwrap() before calling this method if this CharacterFields
// was returned from a transaction, and the transaction was committed or rolled back.
func (cf *CharacterFields) Update() *CharacterFieldsUpdateOne {
	return (&CharacterFieldsClient{config: cf.config}).UpdateOne(cf)
}

// Unwrap unwraps the CharacterFields entity that was returned from a transaction after it was closed,
// so that all future queries will be executed through the driver which created the transaction.
func (cf *CharacterFields) Unwrap() *CharacterFields {
	tx, ok := cf.config.driver.(*txDriver)
	if !ok {
		panic("ent: CharacterFields is not a transactional entity")
	}
	cf.config.driver = tx.drv
	return cf
}

// String implements the fmt.Stringer.
func (cf *CharacterFields) String() string {
	var builder strings.Builder
	builder.WriteString("CharacterFields(")
	builder.WriteString(fmt.Sprintf("id=%v", cf.ID))
	builder.WriteString(", prsn_cat=")
	builder.WriteString(fmt.Sprintf("%v", cf.PrsnCat))
	builder.WriteString(", gender=")
	builder.WriteString(fmt.Sprintf("%v", cf.Gender))
	builder.WriteString(", bloodtype=")
	builder.WriteString(fmt.Sprintf("%v", cf.Bloodtype))
	builder.WriteString(", birth_year=")
	builder.WriteString(fmt.Sprintf("%v", cf.BirthYear))
	builder.WriteString(", birth_mon=")
	builder.WriteString(fmt.Sprintf("%v", cf.BirthMon))
	builder.WriteString(", birth_day=")
	builder.WriteString(fmt.Sprintf("%v", cf.BirthDay))
	builder.WriteByte(')')
	return builder.String()
}

// CharacterFieldsSlice is a parsable slice of CharacterFields.
type CharacterFieldsSlice []*CharacterFields

func (cf CharacterFieldsSlice) config(cfg config) {
	for _i := range cf {
		cf[_i].config = cfg
	}
}
