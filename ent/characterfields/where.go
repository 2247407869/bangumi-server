// Code generated by entc, DO NOT EDIT.

package characterfields

import (
	"app/ent/predicate"

	"entgo.io/ent/dialect/sql"
)

// ID filters vertices based on their ID field.
func ID(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDEQ applies the EQ predicate on the ID field.
func IDEQ(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldID), id))
	})
}

// IDNEQ applies the NEQ predicate on the ID field.
func IDNEQ(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldID), id))
	})
}

// IDIn applies the In predicate on the ID field.
func IDIn(ids ...uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.In(s.C(FieldID), v...))
	})
}

// IDNotIn applies the NotIn predicate on the ID field.
func IDNotIn(ids ...uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(ids) == 0 {
			s.Where(sql.False())
			return
		}
		v := make([]interface{}, len(ids))
		for i := range v {
			v[i] = ids[i]
		}
		s.Where(sql.NotIn(s.C(FieldID), v...))
	})
}

// IDGT applies the GT predicate on the ID field.
func IDGT(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldID), id))
	})
}

// IDGTE applies the GTE predicate on the ID field.
func IDGTE(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldID), id))
	})
}

// IDLT applies the LT predicate on the ID field.
func IDLT(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldID), id))
	})
}

// IDLTE applies the LTE predicate on the ID field.
func IDLTE(id uint8) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldID), id))
	})
}

// Gender applies equality check predicate on the "gender" field. It's identical to GenderEQ.
func Gender(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// Bloodtype applies equality check predicate on the "bloodtype" field. It's identical to BloodtypeEQ.
func Bloodtype(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloodtype), v))
	})
}

// BirthYear applies equality check predicate on the "birth_year" field. It's identical to BirthYearEQ.
func BirthYear(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthYear), v))
	})
}

// BirthMon applies equality check predicate on the "birth_mon" field. It's identical to BirthMonEQ.
func BirthMon(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthMon), v))
	})
}

// BirthDay applies equality check predicate on the "birth_day" field. It's identical to BirthDayEQ.
func BirthDay(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDay), v))
	})
}

// PrsnCatEQ applies the EQ predicate on the "prsn_cat" field.
func PrsnCatEQ(v PrsnCat) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldPrsnCat), v))
	})
}

// PrsnCatNEQ applies the NEQ predicate on the "prsn_cat" field.
func PrsnCatNEQ(v PrsnCat) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldPrsnCat), v))
	})
}

// PrsnCatIn applies the In predicate on the "prsn_cat" field.
func PrsnCatIn(vs ...PrsnCat) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldPrsnCat), v...))
	})
}

// PrsnCatNotIn applies the NotIn predicate on the "prsn_cat" field.
func PrsnCatNotIn(vs ...PrsnCat) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldPrsnCat), v...))
	})
}

// GenderEQ applies the EQ predicate on the "gender" field.
func GenderEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldGender), v))
	})
}

// GenderNEQ applies the NEQ predicate on the "gender" field.
func GenderNEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldGender), v))
	})
}

// GenderIn applies the In predicate on the "gender" field.
func GenderIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldGender), v...))
	})
}

// GenderNotIn applies the NotIn predicate on the "gender" field.
func GenderNotIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldGender), v...))
	})
}

// GenderGT applies the GT predicate on the "gender" field.
func GenderGT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldGender), v))
	})
}

// GenderGTE applies the GTE predicate on the "gender" field.
func GenderGTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldGender), v))
	})
}

// GenderLT applies the LT predicate on the "gender" field.
func GenderLT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldGender), v))
	})
}

// GenderLTE applies the LTE predicate on the "gender" field.
func GenderLTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldGender), v))
	})
}

// BloodtypeEQ applies the EQ predicate on the "bloodtype" field.
func BloodtypeEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBloodtype), v))
	})
}

// BloodtypeNEQ applies the NEQ predicate on the "bloodtype" field.
func BloodtypeNEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBloodtype), v))
	})
}

// BloodtypeIn applies the In predicate on the "bloodtype" field.
func BloodtypeIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBloodtype), v...))
	})
}

// BloodtypeNotIn applies the NotIn predicate on the "bloodtype" field.
func BloodtypeNotIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBloodtype), v...))
	})
}

// BloodtypeGT applies the GT predicate on the "bloodtype" field.
func BloodtypeGT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBloodtype), v))
	})
}

// BloodtypeGTE applies the GTE predicate on the "bloodtype" field.
func BloodtypeGTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBloodtype), v))
	})
}

// BloodtypeLT applies the LT predicate on the "bloodtype" field.
func BloodtypeLT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBloodtype), v))
	})
}

// BloodtypeLTE applies the LTE predicate on the "bloodtype" field.
func BloodtypeLTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBloodtype), v))
	})
}

// BirthYearEQ applies the EQ predicate on the "birth_year" field.
func BirthYearEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthYear), v))
	})
}

// BirthYearNEQ applies the NEQ predicate on the "birth_year" field.
func BirthYearNEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthYear), v))
	})
}

// BirthYearIn applies the In predicate on the "birth_year" field.
func BirthYearIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthYear), v...))
	})
}

// BirthYearNotIn applies the NotIn predicate on the "birth_year" field.
func BirthYearNotIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthYear), v...))
	})
}

// BirthYearGT applies the GT predicate on the "birth_year" field.
func BirthYearGT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthYear), v))
	})
}

// BirthYearGTE applies the GTE predicate on the "birth_year" field.
func BirthYearGTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthYear), v))
	})
}

// BirthYearLT applies the LT predicate on the "birth_year" field.
func BirthYearLT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthYear), v))
	})
}

// BirthYearLTE applies the LTE predicate on the "birth_year" field.
func BirthYearLTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthYear), v))
	})
}

// BirthMonEQ applies the EQ predicate on the "birth_mon" field.
func BirthMonEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthMon), v))
	})
}

// BirthMonNEQ applies the NEQ predicate on the "birth_mon" field.
func BirthMonNEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthMon), v))
	})
}

// BirthMonIn applies the In predicate on the "birth_mon" field.
func BirthMonIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthMon), v...))
	})
}

// BirthMonNotIn applies the NotIn predicate on the "birth_mon" field.
func BirthMonNotIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthMon), v...))
	})
}

// BirthMonGT applies the GT predicate on the "birth_mon" field.
func BirthMonGT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthMon), v))
	})
}

// BirthMonGTE applies the GTE predicate on the "birth_mon" field.
func BirthMonGTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthMon), v))
	})
}

// BirthMonLT applies the LT predicate on the "birth_mon" field.
func BirthMonLT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthMon), v))
	})
}

// BirthMonLTE applies the LTE predicate on the "birth_mon" field.
func BirthMonLTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthMon), v))
	})
}

// BirthDayEQ applies the EQ predicate on the "birth_day" field.
func BirthDayEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.EQ(s.C(FieldBirthDay), v))
	})
}

// BirthDayNEQ applies the NEQ predicate on the "birth_day" field.
func BirthDayNEQ(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.NEQ(s.C(FieldBirthDay), v))
	})
}

// BirthDayIn applies the In predicate on the "birth_day" field.
func BirthDayIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.In(s.C(FieldBirthDay), v...))
	})
}

// BirthDayNotIn applies the NotIn predicate on the "birth_day" field.
func BirthDayNotIn(vs ...int) predicate.CharacterFields {
	v := make([]interface{}, len(vs))
	for i := range v {
		v[i] = vs[i]
	}
	return predicate.CharacterFields(func(s *sql.Selector) {
		// if not arguments were provided, append the FALSE constants,
		// since we can't apply "IN ()". This will make this predicate falsy.
		if len(v) == 0 {
			s.Where(sql.False())
			return
		}
		s.Where(sql.NotIn(s.C(FieldBirthDay), v...))
	})
}

// BirthDayGT applies the GT predicate on the "birth_day" field.
func BirthDayGT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GT(s.C(FieldBirthDay), v))
	})
}

// BirthDayGTE applies the GTE predicate on the "birth_day" field.
func BirthDayGTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.GTE(s.C(FieldBirthDay), v))
	})
}

// BirthDayLT applies the LT predicate on the "birth_day" field.
func BirthDayLT(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LT(s.C(FieldBirthDay), v))
	})
}

// BirthDayLTE applies the LTE predicate on the "birth_day" field.
func BirthDayLTE(v int) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s.Where(sql.LTE(s.C(FieldBirthDay), v))
	})
}

// And groups predicates with the AND operator between them.
func And(predicates ...predicate.CharacterFields) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for _, p := range predicates {
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Or groups predicates with the OR operator between them.
func Or(predicates ...predicate.CharacterFields) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		s1 := s.Clone().SetP(nil)
		for i, p := range predicates {
			if i > 0 {
				s1.Or()
			}
			p(s1)
		}
		s.Where(s1.P())
	})
}

// Not applies the not operator on the given predicate.
func Not(p predicate.CharacterFields) predicate.CharacterFields {
	return predicate.CharacterFields(func(s *sql.Selector) {
		p(s.Not())
	})
}
