// Code generated by mockery v2.10.0. DO NOT EDIT.

package domain

import (
	context "context"

	mock "github.com/stretchr/testify/mock"
)

// MockEpisodeRepo is an autogenerated mock type for the EpisodeRepo type
type MockEpisodeRepo struct {
	mock.Mock
}

type MockEpisodeRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockEpisodeRepo) EXPECT() *MockEpisodeRepo_Expecter {
	return &MockEpisodeRepo_Expecter{mock: &_m.Mock}
}

// Count provides a mock function with given fields: ctx, subjectID
func (_m *MockEpisodeRepo) Count(ctx context.Context, subjectID uint32) (int, error) {
	ret := _m.Called(ctx, subjectID)

	var r0 int
	if rf, ok := ret.Get(0).(func(context.Context, uint32) int); ok {
		r0 = rf(ctx, subjectID)
	} else {
		r0 = ret.Get(0).(int)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, subjectID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockEpisodeRepo_Count_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Count'
type MockEpisodeRepo_Count_Call struct {
	*mock.Call
}

// Count is a helper method to define mock.On call
//  - ctx context.Context
//  - subjectID uint32
func (_e *MockEpisodeRepo_Expecter) Count(ctx interface{}, subjectID interface{}) *MockEpisodeRepo_Count_Call {
	return &MockEpisodeRepo_Count_Call{Call: _e.mock.On("Count", ctx, subjectID)}
}

func (_c *MockEpisodeRepo_Count_Call) Run(run func(ctx context.Context, subjectID uint32)) *MockEpisodeRepo_Count_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockEpisodeRepo_Count_Call) Return(_a0 int, _a1 error) *MockEpisodeRepo_Count_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
