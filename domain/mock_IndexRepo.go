// Code generated by mockery v2.10.0. DO NOT EDIT.

package domain

import (
	context "context"

	model "github.com/bangumi/server/model"
	mock "github.com/stretchr/testify/mock"
)

// MockIndexRepo is an autogenerated mock type for the IndexRepo type
type MockIndexRepo struct {
	mock.Mock
}

type MockIndexRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockIndexRepo) EXPECT() *MockIndexRepo_Expecter {
	return &MockIndexRepo_Expecter{mock: &_m.Mock}
}

// CountSubjects provides a mock function with given fields: ctx, id, subjectType
func (_m *MockIndexRepo) CountSubjects(ctx context.Context, id uint32, subjectType uint8) (int64, error) {
	ret := _m.Called(ctx, id, subjectType)

	var r0 int64
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint8) int64); ok {
		r0 = rf(ctx, id, subjectType)
	} else {
		r0 = ret.Get(0).(int64)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint8) error); ok {
		r1 = rf(ctx, id, subjectType)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexRepo_CountSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CountSubjects'
type MockIndexRepo_CountSubjects_Call struct {
	*mock.Call
}

// CountSubjects is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint32
//  - subjectType uint8
func (_e *MockIndexRepo_Expecter) CountSubjects(ctx interface{}, id interface{}, subjectType interface{}) *MockIndexRepo_CountSubjects_Call {
	return &MockIndexRepo_CountSubjects_Call{Call: _e.mock.On("CountSubjects", ctx, id, subjectType)}
}

func (_c *MockIndexRepo_CountSubjects_Call) Run(run func(ctx context.Context, id uint32, subjectType uint8)) *MockIndexRepo_CountSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint8))
	})
	return _c
}

func (_c *MockIndexRepo_CountSubjects_Call) Return(_a0 int64, _a1 error) *MockIndexRepo_CountSubjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// Get provides a mock function with given fields: ctx, id
func (_m *MockIndexRepo) Get(ctx context.Context, id uint32) (model.Index, error) {
	ret := _m.Called(ctx, id)

	var r0 model.Index
	if rf, ok := ret.Get(0).(func(context.Context, uint32) model.Index); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(model.Index)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexRepo_Get_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Get'
type MockIndexRepo_Get_Call struct {
	*mock.Call
}

// Get is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint32
func (_e *MockIndexRepo_Expecter) Get(ctx interface{}, id interface{}) *MockIndexRepo_Get_Call {
	return &MockIndexRepo_Get_Call{Call: _e.mock.On("Get", ctx, id)}
}

func (_c *MockIndexRepo_Get_Call) Run(run func(ctx context.Context, id uint32)) *MockIndexRepo_Get_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockIndexRepo_Get_Call) Return(_a0 model.Index, _a1 error) *MockIndexRepo_Get_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// IsNsfw provides a mock function with given fields: ctx, id
func (_m *MockIndexRepo) IsNsfw(ctx context.Context, id uint32) (bool, error) {
	ret := _m.Called(ctx, id)

	var r0 bool
	if rf, ok := ret.Get(0).(func(context.Context, uint32) bool); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Get(0).(bool)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, id)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexRepo_IsNsfw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'IsNsfw'
type MockIndexRepo_IsNsfw_Call struct {
	*mock.Call
}

// IsNsfw is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint32
func (_e *MockIndexRepo_Expecter) IsNsfw(ctx interface{}, id interface{}) *MockIndexRepo_IsNsfw_Call {
	return &MockIndexRepo_IsNsfw_Call{Call: _e.mock.On("IsNsfw", ctx, id)}
}

func (_c *MockIndexRepo_IsNsfw_Call) Run(run func(ctx context.Context, id uint32)) *MockIndexRepo_IsNsfw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockIndexRepo_IsNsfw_Call) Return(_a0 bool, _a1 error) *MockIndexRepo_IsNsfw_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// ListSubjects provides a mock function with given fields: ctx, id, subjectType, limit, offset
func (_m *MockIndexRepo) ListSubjects(ctx context.Context, id uint32, subjectType uint8, limit int, offset int) ([]IndexSubject, error) {
	ret := _m.Called(ctx, id, subjectType, limit, offset)

	var r0 []IndexSubject
	if rf, ok := ret.Get(0).(func(context.Context, uint32, uint8, int, int) []IndexSubject); ok {
		r0 = rf(ctx, id, subjectType, limit, offset)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]IndexSubject)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32, uint8, int, int) error); ok {
		r1 = rf(ctx, id, subjectType, limit, offset)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockIndexRepo_ListSubjects_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListSubjects'
type MockIndexRepo_ListSubjects_Call struct {
	*mock.Call
}

// ListSubjects is a helper method to define mock.On call
//  - ctx context.Context
//  - id uint32
//  - subjectType uint8
//  - limit int
//  - offset int
func (_e *MockIndexRepo_Expecter) ListSubjects(ctx interface{}, id interface{}, subjectType interface{}, limit interface{}, offset interface{}) *MockIndexRepo_ListSubjects_Call {
	return &MockIndexRepo_ListSubjects_Call{Call: _e.mock.On("ListSubjects", ctx, id, subjectType, limit, offset)}
}

func (_c *MockIndexRepo_ListSubjects_Call) Run(run func(ctx context.Context, id uint32, subjectType uint8, limit int, offset int)) *MockIndexRepo_ListSubjects_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32), args[2].(uint8), args[3].(int), args[4].(int))
	})
	return _c
}

func (_c *MockIndexRepo_ListSubjects_Call) Return(_a0 []IndexSubject, _a1 error) *MockIndexRepo_ListSubjects_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
