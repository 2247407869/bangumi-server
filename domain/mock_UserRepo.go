// Code generated by mockery v2.10.0. DO NOT EDIT.

package domain

import (
	context "context"

	model "github.com/bangumi/server/model"
	mock "github.com/stretchr/testify/mock"
)

// MockUserRepo is an autogenerated mock type for the UserRepo type
type MockUserRepo struct {
	mock.Mock
}

type MockUserRepo_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUserRepo) EXPECT() *MockUserRepo_Expecter {
	return &MockUserRepo_Expecter{mock: &_m.Mock}
}

// GetByID provides a mock function with given fields: ctx, userID
func (_m *MockUserRepo) GetByID(ctx context.Context, userID uint32) (model.User, error) {
	ret := _m.Called(ctx, userID)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, uint32) model.User); ok {
		r0 = rf(ctx, userID)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, uint32) error); ok {
		r1 = rf(ctx, userID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_GetByID_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByID'
type MockUserRepo_GetByID_Call struct {
	*mock.Call
}

// GetByID is a helper method to define mock.On call
//  - ctx context.Context
//  - userID uint32
func (_e *MockUserRepo_Expecter) GetByID(ctx interface{}, userID interface{}) *MockUserRepo_GetByID_Call {
	return &MockUserRepo_GetByID_Call{Call: _e.mock.On("GetByID", ctx, userID)}
}

func (_c *MockUserRepo_GetByID_Call) Run(run func(ctx context.Context, userID uint32)) *MockUserRepo_GetByID_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uint32))
	})
	return _c
}

func (_c *MockUserRepo_GetByID_Call) Return(_a0 model.User, _a1 error) *MockUserRepo_GetByID_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByIDs provides a mock function with given fields: ctx, ids
func (_m *MockUserRepo) GetByIDs(ctx context.Context, ids ...uint32) (map[uint32]model.User, error) {
	_va := make([]interface{}, len(ids))
	for _i := range ids {
		_va[_i] = ids[_i]
	}
	var _ca []interface{}
	_ca = append(_ca, ctx)
	_ca = append(_ca, _va...)
	ret := _m.Called(_ca...)

	var r0 map[uint32]model.User
	if rf, ok := ret.Get(0).(func(context.Context, ...uint32) map[uint32]model.User); ok {
		r0 = rf(ctx, ids...)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(map[uint32]model.User)
		}
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, ...uint32) error); ok {
		r1 = rf(ctx, ids...)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_GetByIDs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByIDs'
type MockUserRepo_GetByIDs_Call struct {
	*mock.Call
}

// GetByIDs is a helper method to define mock.On call
//  - ctx context.Context
//  - ids ...uint32
func (_e *MockUserRepo_Expecter) GetByIDs(ctx interface{}, ids ...interface{}) *MockUserRepo_GetByIDs_Call {
	return &MockUserRepo_GetByIDs_Call{Call: _e.mock.On("GetByIDs",
		append([]interface{}{ctx}, ids...)...)}
}

func (_c *MockUserRepo_GetByIDs_Call) Run(run func(ctx context.Context, ids ...uint32)) *MockUserRepo_GetByIDs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		variadicArgs := make([]uint32, len(args)-1)
		for i, a := range args[1:] {
			if a != nil {
				variadicArgs[i] = a.(uint32)
			}
		}
		run(args[0].(context.Context), variadicArgs...)
	})
	return _c
}

func (_c *MockUserRepo_GetByIDs_Call) Return(_a0 map[uint32]model.User, _a1 error) *MockUserRepo_GetByIDs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

// GetByName provides a mock function with given fields: ctx, username
func (_m *MockUserRepo) GetByName(ctx context.Context, username string) (model.User, error) {
	ret := _m.Called(ctx, username)

	var r0 model.User
	if rf, ok := ret.Get(0).(func(context.Context, string) model.User); ok {
		r0 = rf(ctx, username)
	} else {
		r0 = ret.Get(0).(model.User)
	}

	var r1 error
	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, username)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUserRepo_GetByName_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetByName'
type MockUserRepo_GetByName_Call struct {
	*mock.Call
}

// GetByName is a helper method to define mock.On call
//  - ctx context.Context
//  - username string
func (_e *MockUserRepo_Expecter) GetByName(ctx interface{}, username interface{}) *MockUserRepo_GetByName_Call {
	return &MockUserRepo_GetByName_Call{Call: _e.mock.On("GetByName", ctx, username)}
}

func (_c *MockUserRepo_GetByName_Call) Run(run func(ctx context.Context, username string)) *MockUserRepo_GetByName_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockUserRepo_GetByName_Call) Return(_a0 model.User, _a1 error) *MockUserRepo_GetByName_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}
